import { FanKind, Nat, Fan } from "../src/types"

import * as p from '../src/index';

function F(val:Fan)          : Fan { return p.force(val);      }
function A(fun:Fan, arg:Fan) : Fan { return p.mkApp(fun, arg); }

export type ExportType =
    | bigint
    | ExportType[]
    | Fan

export function parse(e:ExportType) : Fan {
    let f : Fan;
    if (typeof e === 'bigint') {
        f = e;
    } else if (Array.isArray(e)) {
        f = arrayToExport(e);
    } else {
        f = e as Fan;
    }
    return f;
}

export function arrayToExport(e:ExportType[]) : Fan {
    if (e.length == 0) {
        throw "Impossible empty array in arrayToExport"
    } else if (e.length == 1) {
        return parse(e[0]);
    } else {
        return A(arrayToExport(e.slice(0, -1)), parse(e.slice(-1)));
    }
}

export function run(debug:string, e:ExportType) {
//    console.log("run(" + debug + ")");
    return F(parse(e));
}

export function runpin(debug:string, e:ExportType) {
//    console.log("runpin(" + debug + ")");
    let raw = F(parse(e));
    let wrap = p.mkApp(2n, raw);
    let arity = p.rawArity(raw);

    // A pin simply calls its arguments. For f(a, b, c), it calls an inner
    // values with (a, b, c). Therefore we have to build that here.
    for (let i = 1n; i <= arity; ++i) {
        wrap = arrayToExport([0n, wrap, i]);
    }

    // Are these in the right order now?
    let final = F(arrayToExport([0n, 0n, arity, wrap]));
    // console.log("arity: ", arity, "raw: ", raw, "wrap: ", wrap, "final: ", final);

    return final
}

let s : any = {}
s.mkFun = run("mkFun", 0n);
s.valCase = run("valCase", 1n);
s.natCase = run("natCase", 2n);
s.inc = run("inc", 3n);
s.force = runpin("force", [0n, 435460140902n, 1n, [0n, [2n, [0n, 0n, 0n]], [0n, 2n, 1n]]]);
s.seq = runpin("seq", [0n, 7431539n, 2n, [0n, [0n, [0n, [2n, 2n], 2n], [0n, [0n, 0n, 2n, 1n], 2n]], 1n]]);
s.deepseq = runpin("deepseq", [0n, 31918218849641828n, 2n, [0n, [0n, s.seq, [0n, s.force, 1n]], 2n]]);
s.trk = runpin("trk", [0n, 7041652n, 2n, [0n, [0n, s.deepseq, 1n], 2n]]);
s.die = runpin("die", [0n, 6646116n, 1n, [0n, 0n, 1n]]);
s.isFun = runpin("isFun", [0n, 474413953897n, 1n, [0n, [1n, [0n, 0n, 3n, [2n, 1n]], [0n, 0n, 2n, [2n, 0n]], [0n, 0n, 1n, [2n, 0n]]], 1n]]);
s.isApp = runpin("isApp", [0n, 482919674729n, 1n, [0n, [1n, [0n, 0n, 3n, [2n, 0n]], [0n, 0n, 2n, [2n, 1n]], [0n, 0n, 1n, [2n, 0n]]], 1n]]);
s.isNat = runpin("isNat", [0n, 499848737641n, 1n, [0n, [1n, [0n, 0n, 3n, [2n, 0n]], [0n, 0n, 2n, [2n, 0n]], [0n, 0n, 1n, [2n, 1n]]], 1n]]);
s.car = runpin("car", [0n, 7496035n, 1n, [0n, [1n, [0n, 0n, 3n, [0n, [0n, [2n, 0n], 1n], 2n]], [0n, 0n, 2n, 1n], [0n, 0n, 1n, [2n, 0n]]], 1n]]);
s.cdr = runpin("cdr", [0n, 7496803n, 1n, [0n, [1n, [0n, 0n, 3n, 3n], [0n, 0n, 2n, 2n], [0n, 0n, 1n, [2n, 0n]]], 1n]]);
s.funName = runpin("funName", [0n, 28549237342893414n, 1n, [0n, [1n, [0n, 0n, 3n, 1n], [0n, 0n, 2n, [2n, 0n]], [0n, 0n, 1n, [2n, 0n]]], 1n]]);
s.funArgs = runpin("funArgs", [0n, 32483362743416166n, 1n, [0n, [1n, [0n, 0n, 3n, 2n], [0n, 0n, 2n, [2n, 0n]], [0n, 0n, 1n, [2n, 0n]]], 1n]]);
s.funBody = run("funBody", s.cdr);
s.c2 = run("c2", [0n, 0n, 3n, 0n]);
s.trkVal = runpin("trkVal", [0n, 119165317509748n, 2n, [0n, [0n, s.trk, [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]], 2n]]);
s.caar = runpin("caar", [0n, 1918984547n, 1n, [0n, s.car, [0n, s.car, 1n]]]);
s.cadr = runpin("cadr", [0n, 1919181155n, 1n, [0n, s.car, [0n, s.cdr, 1n]]]);
s.cdar = runpin("cdar", [0n, 1918985315n, 1n, [0n, s.cdr, [0n, s.car, 1n]]]);
s.cddr = runpin("cddr", [0n, 1919181923n, 1n, [0n, s.cdr, [0n, s.cdr, 1n]]]);
s.caaar = runpin("caaar", [0n, 491260043619n, 1n, [0n, s.car, [0n, s.car, [0n, s.car, 1n]]]]);
s.caadr = runpin("caadr", [0n, 491310375267n, 1n, [0n, s.car, [0n, s.car, [0n, s.cdr, 1n]]]]);
s.cadar = runpin("cadar", [0n, 491260240227n, 1n, [0n, s.car, [0n, s.cdr, [0n, s.car, 1n]]]]);
s.caddr = runpin("caddr", [0n, 491310571875n, 1n, [0n, s.car, [0n, s.cdr, [0n, s.cdr, 1n]]]]);
s.cdaar = runpin("cdaar", [0n, 491260044387n, 1n, [0n, s.cdr, [0n, s.car, [0n, s.car, 1n]]]]);
s.cdadr = runpin("cdadr", [0n, 491310376035n, 1n, [0n, s.cdr, [0n, s.car, [0n, s.cdr, 1n]]]]);
s.cddar = runpin("cddar", [0n, 491260240995n, 1n, [0n, s.cdr, [0n, s.cdr, [0n, s.car, 1n]]]]);
s.cdddr = runpin("cdddr", [0n, 491310572643n, 1n, [0n, s.cdr, [0n, s.cdr, [0n, s.cdr, 1n]]]]);
s.S = runpin("S", [0n, 83n, 3n, [0n, [0n, 1n, 3n], [0n, 2n, 3n]]]);
s.K = runpin("K", [0n, 75n, 2n, 1n]);
s.I = runpin("I", [0n, 73n, 1n, 1n]);
s.B = runpin("B", [0n, 66n, 3n, [0n, 1n, [0n, 2n, 3n]]]);
s.apply = runpin("apply", [0n, 521510350945n, 2n, [0n, 1n, 2n]]);
s.supply = runpin("supply", [0n, 133506649847155n, 2n, [0n, 2n, 1n]]);
s.compose = run("compose", s.B);
s.__true = run("__true", 1n);
s.__false = run("__false", 0n);
s.__if = runpin("__if", [0n, 26217n, 3n, [0n, [0n, [0n, [2n, 2n], 3n], [0n, [0n, 0n, 2n, 1n], 2n]], 1n]]);
s.not = runpin("not", [0n, 7630702n, 1n, [0n, [0n, [0n, s.__if, 1n], [2n, 0n]], [2n, 1n]]]);
s.bit = runpin("bit", [0n, 7629154n, 1n, [0n, [0n, [0n, s.__if, 1n], [2n, 1n]], [2n, 0n]]]);
s.and = runpin("and", [0n, 6581857n, 2n, [0n, [0n, [0n, s.__if, 1n], [0n, s.bit, 2n]], [2n, 0n]]]);
s.or = runpin("or", [0n, 29295n, 2n, [0n, [0n, [0n, s.__if, 1n], [2n, 1n]], [0n, s.bit, 2n]]]);
s.xor = runpin("xor", [0n, 7499640n, 2n, [0n, [0n, [0n, s.__if, 1n], [0n, s.not, 2n]], [0n, s.bit, 2n]]]);
s.nand = runpin("nand", [0n, 1684955502n, 2n, [0n, s.not, [0n, [0n, s.and, 1n], 2n]]]);
s.nor = runpin("nor", [0n, 7499630n, 2n, [0n, s.not, [0n, [0n, s.or, 1n], 2n]]]);
s.xnor = runpin("xnor", [0n, 1919905400n, 2n, [0n, s.not, [0n, [0n, s.xor, 1n], 2n]]]);
s.ifNot = runpin("ifNot", [0n, 500083615337n, 3n, [0n, [0n, [0n, s.__if, [0n, s.not, 1n]], 2n], 3n]]);
s.toNat = runpin("toNat", [0n, 499848736628n, 1n, [0n, [2n, 0n, 3n], 1n]]);
s.inc = run("inc", 3n);
s.dec = runpin("dec", [0n, 6514020n, 1n, [0n, [2n, 0n, [0n, 0n, 1n, 1n]], 1n]]);
s.exec = runpin("exec", [0n, 1667594341n, 3n, [0n, [0n, [0n, [2n, 2n], 2n], [0n, [0n, 0n, 1n], [0n, 1n, 2n]]], 3n]]);
s.add = runpin("add", [0n, 6579297n, 2n, [0n, [0n, [s.exec, 3n], [0n, s.toNat, 1n]], 2n]]);
s.mul = runpin("mul", [0n, 7107949n, 2n, [0n, [0n, [0n, s.exec, [0n, s.add, 1n]], [2n, 0n]], 2n]]);
s.sub = runpin("sub", [0n, 6452595n, 2n, [0n, [0n, [s.exec, s.dec], 1n], 2n]]);
s.lte = runpin("lte", [0n, 6648940n, 2n, [0n, s.not, [0n, [0n, s.sub, 1n], 2n]]]);
s.lth = runpin("lth", [0n, 6845548n, 2n, [0n, [0n, s.lte, [0n, 3n, 1n]], 2n]]);
s.gte = runpin("gte", [0n, 6648935n, 2n, [0n, [0n, s.lte, 2n], 1n]]);
s.gth = runpin("gth", [0n, 6845543n, 2n, [0n, [0n, s.lth, 2n], 1n]]);
s.aeq = runpin("aeq", [0n, 7431521n, 2n, [0n, [0n, s.and, [0n, [0n, s.lte, 2n], 1n]], [0n, [0n, s.lte, 1n], 2n]]]);
s.min = runpin("min", [0n, 7235949n, 2n, [0n, [0n, [0n, s.__if, [0n, [0n, s.lte, 1n], 2n]], 1n], 2n]]);
s.max = runpin("max", [0n, 7889261n, 2n, [0n, [0n, [0n, s.__if, [0n, [0n, s.gth, 1n], 2n]], 1n], 2n]]);
s.div = runpin("div", [0n, 7760228n, 2n, [0n, [0n, [0n, s.__if, [0n, [0n, s.lth, 1n], 2n]], [2n, 0n]], [0n, 3n, [0n, [0n, 0n, [0n, [0n, s.sub, 1n], 2n]], 2n]]]]);
s.mod = runpin("mod", [0n, 6582125n, 2n, [0n, [0n, s.sub, 1n], [0n, [0n, s.mul, 2n], [0n, [0n, s.div, 1n], 2n]]]]);
s.bex = runpin("bex", [0n, 7890274n, 1n, [0n, [s.exec, [s.mul, 2n], 1n], 1n]]);
s.lsh = runpin("lsh", [0n, 6845292n, 2n, [0n, [0n, s.mul, [0n, s.bex, 2n]], 1n]]);
s.rsh = runpin("rsh", [0n, 6845298n, 2n, [0n, [0n, s.div, 1n], [0n, s.bex, 2n]]]);
s.even = runpin("even", [0n, 1852143205n, 1n, [0n, s.not, [0n, [0n, s.mod, 1n], 2n]]]);
s.odd = runpin("odd", [0n, 6579311n, 1n, [0n, [0n, s.mod, 1n], 2n]]);
s.met = runpin("met", [0n, 7628141n, 1n, [0n, [[0n, 28519n, 2n, [0n, [0n, s.seq, 1n], [0n, [0n, [0n, s.__if, [0n, s.not, 2n]], 1n], [0n, [0n, 0n, [0n, 3n, 1n]], [0n, [0n, s.div, 2n], [2n, 2n]]]]]], 0n], 1n]]);
s.roundUp = runpin("roundUp", [0n, 31619087229874034n, 2n, [0n, [0n, [0n, s.ifNot, 2n], 1n], [0n, [0n, [0n, s.ifNot, [0n, [0n, s.mod, 1n], 2n]], 1n], [0n, [0n, s.sub, [0n, [0n, s.add, 1n], 2n]], [0n, [0n, s.mod, 1n], 2n]]]]]);
s.takeBits = runpin("takeBits", [0n, 8319390145550442868n, 2n, [0n, [0n, s.mod, 2n], [0n, s.bex, 1n]]]);
s.bitWeld = runpin("bitWeld", [0n, 28266680185809250n, 2n, [0n, [0n, s.add, 1n], [0n, [0n, s.lsh, 2n], [0n, s.met, 1n]]]]);
s.perbit = runpin("perbit", [0n, 127995972052336n, 3n, [0n, [0n, [0n, [0n, [0n, [0n, 28519n, 5n, [0n, [0n, [0n, s.__if, [0n, s.not, [0n, [0n, s.add, 2n], 3n]]], 5n], [1n, [0n, [0n, s.add, 5n], [0n, [0n, s.lsh, [0n, [0n, 1n, [0n, [0n, s.mod, 2n], [2n, 2n]]], [0n, [0n, s.mod, 3n], [2n, 2n]]]], 4n]], [0n, [0n, s.seq, 6n], [0n, [0n, [0n, [0n, [0n, 0n, 1n], [0n, [0n, s.div, 2n], [2n, 2n]]], [0n, [0n, s.div, 3n], [2n, 2n]]], [0n, [2n, 3n], 4n]], 6n]]]]], 1n], 2n], 3n], [2n, 0n]], [2n, 0n]]]);
s.con = runpin("con", [0n, 7237475n, 2n, [0n, [0n, [s.perbit, s.or], 1n], 2n]]);
s.dis = runpin("dis", [0n, 7563620n, 2n, [0n, [0n, [s.perbit, s.and], 1n], 2n]]);
s.mix = runpin("mix", [0n, 7891309n, 2n, [0n, [0n, [s.perbit, s.xor], 1n], 2n]]);
s.eql = runpin("eql", [0n, 7106917n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isFun, 1n]], [0n, [0n, s.and, [0n, s.isFun, 2n]], [0n, [0n, s.and, [0n, [0n, s.aeq, [0n, s.funArgs, 1n]], [0n, s.funArgs, 2n]]], [0n, [0n, s.and, [0n, [0n, s.aeq, [0n, s.funName, 1n]], [0n, s.funName, 2n]]], [0n, [0n, 0n, [0n, s.cdr, 1n]], [0n, s.cdr, 2n]]]]]], [0n, [0n, [0n, s.__if, [0n, s.isApp, 1n]], [0n, [0n, s.and, [0n, s.isApp, 2n]], [0n, [0n, s.and, [0n, [0n, 0n, [0n, s.car, 1n]], [0n, s.car, 2n]]], [0n, [0n, 0n, [0n, s.cdr, 1n]], [0n, s.cdr, 2n]]]]], [0n, [0n, s.and, [0n, s.isNat, 2n]], [0n, [0n, s.aeq, 1n], 2n]]]]]);
s.neq = runpin("neq", [0n, 7431534n, 2n, [0n, s.not, [0n, [0n, s.eql, 1n], 2n]]]);
s.head = runpin("head", [0n, 1684104552n, 1n, [0n, [0n, [0n, s.__if, [0n, s.isApp, 1n]], [0n, 0n, [0n, s.car, 1n]]], 1n]]);
s.arity = runpin("arity", [0n, 521644110433n, 1n, [0n, [0n, [0n, [1n, [0n, 0n, 3n, 2n]], [0n, [0n, 0n, 3n, [0n, s.dec, [0n, 1n, 2n]]], 0n]], [2n, 3n, [2n, 4n, [2n, 3n, [0n, 0n, 1n, [2n, 1n]]]]]], 1n]]);
s.len = runpin("len", [0n, 7234924n, 1n, [0n, [[0n, 28519n, 2n, [0n, [0n, s.seq, 1n], [0n, [0n, [0n, s.__if, [0n, s.not, [0n, s.isApp, 2n]]], 1n], [0n, [0n, 0n, [0n, 3n, 1n]], [0n, s.car, 2n]]]]], 0n], 1n]]);
s.get = runpin("get", [0n, 7628135n, 2n, [0n, [0n, [0n, s.__if, [0n, s.not, [0n, s.isApp, 1n]]], [2n, 0n]], [0n, [0n, [0n, [2n, 2n], [0n, s.cdr, 1n]], [0n, 0n, [0n, s.car, 1n]]], 2n]]]);
s.mut = runpin("mut", [0n, 7632237n, 3n, [0n, [0n, [0n, s.__if, [0n, s.not, [0n, s.isApp, 3n]]], 3n], [0n, [0n, [0n, s.__if, [0n, s.not, 1n]], [0n, [0n, s.car, 3n], 2n]], [0n, [0n, [0n, [0n, 0n, [0n, s.dec, 1n]], 2n], [0n, s.car, 3n]], [0n, s.cdr, 3n]]]]]);
s.idx = runpin("idx", [0n, 7890025n, 2n, [0n, [0n, s.get, 2n], 1n]]);
s.v0 = run("v0", [0n, 0n, 1n, 0n]);
s.v1 = runpin("v1", [0n, 12662n, 1n, [0n, [0n, [2n, [0n, 0n, 2n]], [2n, 0n]], 1n]]);
s.v2 = runpin("v2", [0n, 12918n, 2n, [0n, [0n, [0n, [2n, [0n, 0n, 3n]], [2n, 0n]], 2n], 1n]]);
s.NONE = run("NONE", 0n);
s.SOME = runpin("SOME", [0n, 1162694483n, 1n, [0n, [2n, 0n], 1n]]);
s.maybeCase = runpin("maybeCase", [0n, 1871435151934490239341n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 1n]], 2n], [0n, 3n, [0n, s.cdr, 1n]]]]);
s.fromSome = runpin("fromSome", [0n, 7308620174401172070n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], 1n], [0n, s.cdr, 2n]]]);
s.cow = runpin("cow", [0n, 7827299n, 1n, [0n, [0n, [0n, 0n], [0n, 3n, 1n]], [2n, 0n]]]);
s.c0 = run("c0", [0n, 0n, 1n, 0n]);
s.c1 = run("c1", [0n, 0n, 2n, 0n]);
s.c2 = run("c2", [0n, 0n, 3n, 0n]);
s.c3 = run("c3", [0n, 0n, 4n, 0n]);
s.v0 = run("v0", [0n, 0n, 1n, 0n]);
s.v1 = run("v1", [0n, 0n, 2n, 0n]);
s.v2 = runpin("v2", [0n, 12918n, 2n, [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]]);
s.v3 = runpin("v3", [0n, 13174n, 3n, [0n, [0n, [0n, [0n, 0n, 4n, 0n], 3n], 2n], 1n]]);
s.mkRow = runpin("mkRow", [0n, 512968780653n, 1n, [0n, [0n, [0n, 0n], 1n], [0n, [0n, [0n, 28519n, 2n, [0n, [0n, [0n, s.__if, [0n, s.not, 1n]], 2n], [0n, [0n, 0n, [0n, s.dec, 1n]], [0n, [0n, [2n, 0n], 2n], 1n]]]], 1n], [0n, 2n, [0n, s.cow, 1n]]]]]);
s.isCow = runpin("isCow", [0n, 512967799657n, 1n, [0n, [0n, s.and, [0n, s.isFun, 1n]], [0n, [0n, s.and, [0n, [s.eql, 0n], [0n, s.funName, 1n]]], [0n, [s.eql, 0n], [0n, s.cdr, 1n]]]]]);
s.isRow = runpin("isRow", [0n, 512968782697n, 1n, [0n, [0n, s.and, [0n, [s.eql, 1n], [0n, s.arity, 1n]]], [0n, s.isCow, [0n, s.head, 1n]]]]);
s.__null = runpin("__null", [0n, 1819047278n, 1n, [0n, s.not, [0n, s.isApp, 1n]]]);
s.__switch = runpin("__switch", [0n, 114776364119923n, 3n, [0n, [0n, [0n, s.__if, [0n, [0n, s.gte, 1n], [0n, s.len, 3n]]], 2n], [0n, [0n, s.idx, 1n], 3n]]]);
s.match = runpin("match", [0n, 448345170285n, 3n, [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], 2n], 3n]]);
s.gen = runpin("gen", [0n, 7234919n, 2n, [0n, [0n, [0n, [0n, 28519n, 3n, [0n, [0n, [0n, s.__if, [0n, s.not, 2n]], 3n], [1n, [0n, s.dec, 2n], [0n, [0n, [0n, 0n, 1n], 4n], [0n, 3n, [0n, 1n, 4n]]]]]], 2n], 1n], [0n, s.cow, 1n]]]);
s.slice = runpin("slice", [0n, 435459550323n, 3n, [0n, [0n, s.gen, [0n, [0n, s.sub, 3n], 2n]], [0n, [0n, [0n, 0n, 3n, [0n, [0n, s.get, 1n], [0n, [0n, s.add, 2n], 3n]]], 1n], 2n]]]);
s.foldr = runpin("foldr", [0n, 491311099750n, 3n, [0n, [0n, [0n, [0n, [0n, [0n, 28519n, 5n, [0n, [0n, [0n, s.__if, [0n, s.not, 5n]], 2n], [0n, [0n, 1n, [0n, [0n, s.get, 3n], 4n]], [0n, [0n, [0n, [0n, [0n, 0n, 1n], 2n], 3n], [0n, [2n, 3n], 4n]], [0n, s.dec, 5n]]]]], 1n], 2n], 3n], [2n, 0n]], [0n, s.len, 3n]]]);
s.foldl = runpin("foldl", [0n, 465541295974n, 3n, [0n, [0n, [0n, [0n, [0n, [0n, 28519n, 5n, [0n, [0n, s.seq, 3n], [0n, [0n, [0n, s.__if, [0n, s.not, 5n]], 3n], [0n, [0n, [0n, [0n, [0n, 0n, 1n], 2n], [0n, [0n, 1n, 3n], [0n, [0n, s.idx, 4n], 2n]]], [0n, [2n, 3n], 4n]], [0n, s.dec, 5n]]]]], 1n], 3n], 2n], [2n, 0n]], [0n, s.len, 3n]]]);
s.weld = runpin("weld", [0n, 1684825463n, 2n, [1n, [0n, s.len, 1n], [0n, [0n, s.gen, [0n, [0n, s.add, 3n], [0n, s.len, 2n]]], [0n, [0n, [0n, [0n, 0n, 4n, [0n, [0n, [0n, s.__if, [0n, [0n, s.lth, 4n], 3n]], [0n, [0n, s.idx, 4n], 1n]], [0n, [0n, s.idx, [0n, [0n, s.sub, 4n], 3n]], 2n]]], 1n], 2n], 3n]]]]);
s.tag = runpin("tag", [0n, 6775156n, 1n, [0n, [0n, s.gen, [0n, s.len, 1n]], [0n, [0n, 0n, 2n, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, s.idx, 2n], 1n]], 2n]], 1n]]]);
s.findIdx = runpin("findIdx", [0n, 33887263585626470n, 2n, [0n, [0n, [0n, s.foldr, [0n, [0n, 0n, 3n, [0n, [0n, [0n, s.__if, [0n, 1n, [0n, [s.idx, 1n], 2n]]], [0n, s.SOME, [0n, [s.idx, 0n], 2n]]], 3n]], 1n]], [2n, 0n]], [0n, s.tag, 2n]]]);
s.elemIdx = runpin("elemIdx", [0n, 33887263736032357n, 2n, [0n, [0n, s.findIdx, [0n, s.eql, 1n]], 2n]]);
s.put = runpin("put", [0n, 7632240n, 3n, [0n, [0n, [0n, s.mut, 2n], 3n], 1n]]);
s.rep = runpin("rep", [0n, 7366002n, 2n, [0n, [0n, s.gen, 2n], [0n, [0n, 0n, 2n, 1n], 1n]]]);
s.map = runpin("map", [0n, 7364973n, 2n, [0n, [0n, s.gen, [0n, s.len, 2n]], [0n, [0n, [0n, 0n, 3n, [0n, 1n, [0n, [0n, s.idx, 3n], 2n]]], 1n], 2n]]]);
s.turn = runpin("turn", [0n, 1852994932n, 2n, [0n, [0n, s.map, 2n], 1n]]);
s.rowAnd = runpin("rowAnd", [0n, 110424707526514n, 1n, [0n, [s.foldr, s.and, 1n], 1n]]);
s.rowOr = runpin("rowOr", [0n, 490959499122n, 1n, [0n, [s.foldr, s.or, 0n], 1n]]);
s.sum = runpin("sum", [0n, 7173491n, 1n, [0n, [s.foldr, s.add, 0n], 1n]]);
s.all = runpin("all", [0n, 7105633n, 2n, [0n, s.rowAnd, [0n, [0n, s.map, 1n], 2n]]]);
s.any = runpin("any", [0n, 7958113n, 2n, [0n, s.rowOr, [0n, [0n, s.map, 1n], 2n]]]);
s.cat = runpin("cat", [0n, 7627107n, 1n, [0n, [s.foldr, s.weld, [0n, 0n, 1n, 0n]], 1n]]);
s.catMap = runpin("catMap", [0n, 123563213611363n, 2n, [0n, s.cat, [0n, [0n, s.map, 1n], 2n]]]);
s.zipWith = runpin("zipWith", [0n, 29401393365281146n, 3n, [0n, [0n, s.gen, [0n, [0n, s.min, [0n, s.len, 2n]], [0n, s.len, 3n]]], [0n, [0n, [0n, [0n, 0n, 4n, [0n, [0n, 1n, [0n, [0n, s.idx, 4n], 2n]], [0n, [0n, s.idx, 4n], 3n]]], 1n], 2n], 3n]]]);
s.zip = runpin("zip", [0n, 7367034n, 2n, [0n, [0n, [s.zipWith, s.v2], 1n], 2n]]);
s.rowApply = runpin("rowApply", [0n, 8749491803511025522n, 2n, [0n, [0n, [s.foldl, s.apply], 1n], 2n]]);
s.rowRepel = runpin("rowRepel", [0n, 7810772709221560178n, 2n, [0n, [0n, [s.foldr, s.supply], 1n], 2n]]);
s.take = runpin("take", [0n, 1701536116n, 2n, [0n, [0n, s.gen, [0n, [0n, s.min, 1n], [0n, s.len, 2n]]], [0n, s.get, 2n]]]);
s.drop = runpin("drop", [0n, 1886351972n, 2n, [0n, [0n, s.gen, [0n, [0n, s.sub, [0n, s.len, 2n]], 1n]], [0n, [0n, [0n, 0n, 3n, [0n, [0n, s.get, 2n], [0n, [0n, s.add, 3n], 1n]]], 1n], 2n]]]);
s.has = runpin("has", [0n, 7561576n, 2n, [0n, [0n, s.any, [0n, s.eql, 1n]], 2n]]);
s.rev = runpin("rev", [0n, 7759218n, 1n, [1n, [0n, s.len, 1n], [0n, [0n, s.gen, 2n], [0n, [0n, [0n, 0n, 3n, [0n, [0n, s.get, 1n], [0n, [0n, s.sub, 2n], [0n, [2n, 3n], 3n]]]], 1n], 2n]]]]);
s.chunks = runpin("chunks", [0n, 126905251883107n, 2n, [0n, [0n, [0n, s.__if, [0n, s.not, [0n, s.isApp, 2n]]], [0n, 0n, 1n, 0n]], [0n, s.rev, [0n, [0n, [0n, [0n, 28519n, 3n, [0n, [0n, [0n, s.__if, [0n, s.not, [0n, s.len, 2n]]], 3n], [0n, [0n, [0n, 0n, 1n], [0n, [0n, s.drop, 1n], 2n]], [0n, 3n, [0n, [0n, s.take, 1n], 2n]]]]], 1n], 2n], [0n, s.cow, [0n, [0n, s.div, [0n, [0n, s.roundUp, [0n, s.len, 2n]], 1n]], 1n]]]]]]);
//s.WEIRD = runpin("WEIRD", [0n, 44n, 4n, [1n, [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 4n]], 3n], [0n, [0n, s.weld, 3n], [0n, [0n, 0n, 2n, 0n], 4n]]], [0n, [2n, 1n], [0n, [s.v2, 0n], [0n, [s.v3, 0n, 124n], [0n, [0n, s.weld, [0n, [0n, 0n, 2n, 0n], [0n, [s.v2, 4n], [0n, s.cow, [0n, s.len, 5n]]]]], [0n, s.rev, 5n]]]]]]]);
s.r = run("r", s.rev);
s.r3 = runpin("r3", [0n, 13170n, 3n, [0n, [0n, [0n, [0n, s.cow, [2n, 3n]], 3n], 2n], 1n]]);
s.ADD = runpin("ADD", [0n, 4473921n, 3n, [0n, [0n, 3n, 1n], 2n]]);
s.mkPin = runpin("mkPin", [0n, 474213280621n, 1n, [1n, [0n, s.arity, 1n], [0n, [0n, [0n, 0n], 2n], [0n, [0n, [0n, 28519n, 2n, [0n, [0n, [0n, s.ifNot, 2n], [0n, [2n, 2n], 1n]], [0n, [0n, [2n, 0n], [0n, [0n, 0n, 1n], [0n, s.dec, 2n]]], 2n]]], 1n], 2n]]]]);
s.pinItem = runpin("pinItem", [0n, 30792322584045936n, 1n, [0n, [0n, 28519n, 1n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 1n]], [2n, 0n]], [1n, [0n, s.car, 1n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [0n, s.cdr, 1n]], [0n, 0n, [0n, s.cdr, 2n]]]]]], [0n, s.cdr, 1n]]]);
s.isPin = runpin("isPin", [0n, 474213282665n, 1n, [0n, [0n, s.and, [0n, s.isFun, 1n]], [0n, [0n, [0n, 28519n, 2n, [1n, [0n, s.car, 2n], [0n, [0n, [0n, s.ifNot, 1n], [0n, [s.eql, 2n], 3n]], [0n, [0n, s.and, [0n, [0n, s.eql, 1n], [0n, s.cdr, 2n]]], [0n, [0n, s.and, [0n, [s.eql, 0n], [0n, s.car, 3n]]], [0n, [0n, 0n, [0n, s.dec, 1n]], [0n, s.cdr, 3n]]]]]]], [0n, s.funArgs, 1n]], [0n, s.cdr, 1n]]]]);
s.checkPin = runpin("checkPin", [0n, 7955978638886004835n, 1n, [1n, [0n, s.mkPin, 1n], [0n, [0n, s.and, [0n, s.isPin, 2n]], [0n, [0n, s.eql, 1n], [0n, s.pinItem, 2n]]]]]);
s.LEFT = runpin("LEFT", [0n, 1413891404n, 1n, [0n, [2n, 0n], 1n]]);
s.RIGHT = runpin("RIGHT", [0n, 361989884242n, 1n, [0n, [2n, 1n], 1n]]);
s.eitherCase = runpin("eitherCase", [0n, 479087398909535753365861n, 3n, [0n, [0n, [0n, s.__if, [0n, s.car, 1n]], [0n, 3n, [0n, s.cdr, 1n]]], [0n, 2n, [0n, s.cdr, 1n]]]]);
s.fromRight = runpin("fromRight", [0n, 2147345410055597945446n, 2n, [0n, [0n, [0n, s.__if, [0n, s.car, 2n]], [0n, s.cdr, 2n]], [0n, 1n, [0n, s.cdr, 2n]]]]);
s.eitherCaseLeft = runpin("eitherCaseLeft", [0n, 2360872136943490377085716866034021n, 3n, [0n, [0n, [0n, s.__if, [0n, s.car, 1n]], [0n, 2n, [0n, s.cdr, 1n]]], [0n, 3n, [0n, s.cdr, 1n]]]]);
s.eitherOpen = runpin("eitherOpen", [0n, 521331527079940916013413n, 2n, [0n, [0n, [0n, s.__if, [0n, s.car, 1n]], [0n, 2n, [0n, s.cdr, 1n]]], 1n]]);
s.eitherOpenLeft = runpin("eitherOpenLeft", [0n, 2360872136985734505256122028681573n, 2n, [0n, [0n, [0n, s.__if, [0n, s.car, 1n]], 1n], [0n, 2n, [0n, s.cdr, 1n]]]]);
s.fromLeft = runpin("fromLeft", [0n, 8387502734952067686n, 2n, [0n, [0n, [0n, s.__if, [0n, s.car, 2n]], [0n, 1n, [0n, s.cdr, 2n]]], [0n, s.cdr, 2n]]]);
s.eitherGetRight = runpin("eitherGetRight", [0n, 2361031247207681090201113979021669n, 2n, [0n, [0n, [0n, s.__if, [0n, s.car, 1n]], [0n, 2n, [0n, s.cdr, 1n]]], 1n]]);
s.eitherGetLeft = runpin("eitherGetLeft", [0n, 9222156785211194373552062359909n, 2n, [0n, [0n, [0n, s.__if, [0n, s.car, 1n]], 1n], [0n, 2n, [0n, s.cdr, 1n]]]]);
s.eitherMap = runpin("eitherMap", [0n, 2073046722230225234277n, 2n, [0n, [0n, [0n, s.__if, [0n, s.car, 2n]], [0n, [2n, 1n], [0n, 1n, [0n, s.cdr, 2n]]]], [0n, [2n, 0n], [0n, s.cdr, 2n]]]]);
s.NIL = run("NIL", 0n);
s.CONS = runpin("CONS", [0n, 1397641027n, 2n, [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]]);
s.listCase = runpin("listCase", [0n, 7310293562496870764n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 1n]], 2n], [0n, [0n, 3n, [0n, [s.idx, 0n], 1n]], [0n, [s.idx, 1n], 1n]]]]);
s.listMap = runpin("listMap", [0n, 31632182685690220n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [2n, 0n]], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, 0n, 1n], [0n, [s.idx, 1n], 2n]]], [0n, 1n, [0n, [s.idx, 0n], 2n]]]]]);
s.listTurn = runpin("listTurn", [0n, 7958552497108511084n, 2n, [0n, [0n, s.listMap, 2n], 1n]]);
s.listHead = runpin("listHead", [0n, 7233173838399498604n, 1n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 1n]], [2n, 0n]], [0n, s.SOME, [0n, [s.idx, 0n], 1n]]]]);
s.listSafeHead = runpin("listSafeHead", [0n, 31066245081124103500198013292n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], 1n], [0n, [s.idx, 0n], 2n]]]);
s.listUnsafeHead = runpin("listUnsafeHead", [0n, 2035957437636549255989450520095084n, 1n, [s.listSafeHead, 0n]]);
s.listFoldl = runpin("listFoldl", [0n, 1999484641010301233516n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], 2n], [1n, [0n, [0n, 1n, 2n], [0n, [s.idx, 0n], 3n]], [0n, [0n, s.seq, 4n], [0n, [0n, [0n, 0n, 1n], 4n], [0n, [s.idx, 1n], 3n]]]]]]);
s.listFoldr = runpin("listFoldr", [0n, 2110165105452558543212n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], 2n], [0n, [0n, 1n, [0n, [s.idx, 0n], 3n]], [0n, [0n, [0n, 0n, 1n], 2n], [0n, [s.idx, 1n], 3n]]]]]);
s.listMap = runpin("listMap", [0n, 31632182685690220n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [2n, 0n]], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, 0n, 1n], [0n, [s.idx, 1n], 2n]]], [0n, 1n, [0n, [s.idx, 0n], 2n]]]]]);
s.listTurn = runpin("listTurn", [0n, 7958552497108511084n, 2n, [0n, [0n, s.listMap, 2n], 1n]]);
s.listLen = runpin("listLen", [0n, 31073626483812716n, 1n, [0n, [s.listFoldr, [0n, 0n, 2n, [0n, 3n, 2n]], 0n], 1n]]);
s.listSum = runpin("listSum", [0n, 30809773757917548n, 1n, [0n, [s.listFoldr, s.add, 0n], 1n]]);
s.listToRow = runpin("listToRow", [0n, 2203184141066258573676n, 1n, [0n, [0n, [s.listFoldr, s.supply], [0n, s.cow, [0n, s.listLen, 1n]]], 1n]]);
s.listToRowReversed = runpin("listToRowReversed", [0n, 34163088154040235307013088222310917433708n, 1n, [0n, [0n, [s.listFoldl, s.apply], [0n, s.cow, [0n, s.listLen, 1n]]], 1n]]);
s.listFromRow = runpin("listFromRow", [0n, 144387875732400566068013420n, 1n, [0n, [s.foldr, s.CONS, 0n], 1n]]);
s.listAnd = runpin("listAnd", [0n, 28268725076715884n, 1n, [0n, [s.listFoldr, s.and, 1n], 1n]]);
s.listOr = runpin("listOr", [0n, 125685581703532n, 1n, [0n, [s.listFoldr, s.or, 0n], 1n]]);
s.listSum = runpin("listSum", [0n, 30809773757917548n, 1n, [0n, [s.listFoldr, s.add, 0n], 1n]]);
s.listAll = runpin("listAll", [0n, 30518325867145580n, 2n, [0n, s.listAnd, [0n, [0n, s.listMap, 1n], 2n]]]);
s.listAny = runpin("listAny", [0n, 34179699587639660n, 2n, [0n, s.listOr, [0n, [0n, s.listMap, 1n], 2n]]]);
s.listHas = runpin("listHas", [0n, 32476586140985708n, 2n, [0n, [0n, s.listAny, [0n, s.eql, 1n]], 2n]]);
s.listEnumFrom = runpin("listEnumFrom", [0n, 33868596485442300195611306348n, 1n, [0n, [0n, [0n, 0n, 3n, 0n], [0n, 0n, [0n, 3n, 1n]]], 1n]]);
s.listWeld = runpin("listWeld", [0n, 7236270127567825260n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 1n]], 2n], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, 0n, [0n, [s.idx, 1n], 1n]], 2n]], [0n, [s.idx, 0n], 1n]]]]);
s.listCat = runpin("listCat", [0n, 32758039642859884n, 1n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 1n]], [2n, 0n]], [0n, [0n, s.listWeld, [0n, [s.idx, 0n], 1n]], [0n, 0n, [0n, [s.idx, 1n], 1n]]]]]);
s.listTake = runpin("listTake", [0n, 7308041835697629548n, 2n, [0n, [0n, [0n, s.ifNot, 1n], [2n, 0n]], [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [2n, 0n]], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, 0n, [0n, s.dec, 1n]], [0n, [s.idx, 1n], 2n]]], [0n, [s.idx, 0n], 2n]]]]]);
s.listDrop = runpin("listDrop", [0n, 8101819892999874924n, 2n, [0n, [0n, [0n, s.ifNot, 1n], 2n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [2n, 0n]], [0n, [0n, 0n, [0n, s.dec, 1n]], [0n, [s.idx, 1n], 2n]]]]]);
s.listDigits = runpin("listDigits", [0n, 545219562997598823606636n, 1n, [0n, [0n, [0n, s.ifNot, 1n], [0n, [s.CONS, 48n], [2n, 0n]]], [0n, [0n, [0n, 1886351212n, 2n, [0n, [0n, s.seq, 2n], [0n, [0n, [0n, s.ifNot, 1n], 2n], [0n, [0n, 0n, [0n, [0n, s.div, 1n], 10n]], [0n, [0n, [0n, 0n, 3n, 0n], 2n], [0n, [0n, s.add, [0n, [0n, s.mod, 1n], 10n]], 48n]]]]]], 1n], [2n, 0n]]]]);
s.digits = runpin("digits", [0n, 126943821785444n, 1n, [0n, s.listToRow, [0n, s.listDigits, 1n]]]);
s.listZipWith = runpin("listZipWith", [0n, 126278022960713768430168428n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [2n, 0n]], [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], [2n, 0n]], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, [0n, 0n, 1n], [0n, [s.idx, 1n], 2n]], [0n, [s.idx, 1n], 3n]]], [0n, [0n, 1n, [0n, [s.idx, 0n], 2n]], [0n, [s.idx, 0n], 3n]]]]]]);
s.listZip = runpin("listZip", [0n, 31641034613287276n, 2n, [0n, [0n, [0n, s.listZipWith, [0n, [2n, [0n, 0n, 3n]], [2n, 0n]]], 2n], 1n]]);
s.listFilter = runpin("listFilter", [0n, 540221289394541425813868n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [2n, 0n]], [1n, [0n, [s.idx, 0n], 2n], [1n, [0n, [s.idx, 1n], 2n], [0n, [0n, [0n, s.__if, [0n, 1n, 3n]], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, 0n, 1n], 4n]], 3n]], [0n, [0n, 0n, 1n], 4n]]]]]]);
s.listNull = runpin("listNull", [0n, 7812748433402587500n, 1n, [0n, s.isNat, 1n]]);
s.listMinimumOn = runpin("listMinimumOn", [0n, 8739679519794472115484774066540n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], 2n], [1n, [0n, [s.idx, 0n], 3n], [0n, [0n, [0n, 0n, 1n], [0n, [0n, [0n, s.__if, [0n, [0n, s.lth, [0n, 1n, 4n]], [0n, 1n, 2n]]], 4n], 2n]], [0n, [s.idx, 1n], 3n]]]]]);
s.listSortOn = runpin("listSortOn", [0n, 520925996788943999428972n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [2n, 0n]], [1n, [0n, [0n, [0n, s.listMinimumOn, 1n], [0n, [s.idx, 0n], 2n]], [0n, [s.idx, 1n], 2n]], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, 0n, 1n], [0n, [0n, s.listFilter, [0n, [0n, [0n, 0n, 3n, [0n, s.not, [0n, [0n, s.eql, 2n], [0n, 1n, 3n]]]], 1n], [0n, 1n, 3n]]], 2n]]], 3n]]]]);
s.sortOn = runpin("sortOn", [0n, 121287535128435n, 2n, [0n, s.listToRow, [0n, [0n, s.listSortOn, 1n], [0n, s.listFromRow, 2n]]]]);
s.unApp = runpin("unApp", [0n, 482919673461n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isApp, 1n]], [0n, [0n, 0n, [0n, s.car, 1n]], [0n, [0n, s.CONS, [0n, s.cdr, 1n]], 2n]]], [0n, [0n, s.CONS, 1n], 2n]]]);
s.inspect = runpin("inspect", [0n, 32760384627895913n, 1n, [0n, [0n, [0n, s.__if, [0n, s.isApp, 1n]], [0n, s.listToRow, [0n, [0n, s.unApp, [0n, s.car, 1n]], [0n, [0n, s.CONS, [0n, s.cdr, 1n]], [2n, 0n]]]]], [0n, [0n, [0n, s.__if, [0n, s.isFun, 1n]], [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], [0n, s.cdr, 1n]], [0n, s.funArgs, 1n]], [0n, s.funName, 1n]], [2n, 0n]]], 1n]]]);
s.fullInspection = runpin("fullInspection", [0n, 2239892019071578910533237129114982n, 1n, [1n, [0n, s.inspect, 1n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], 2n], [0n, [0n, s.map, 0n], 2n]]]]);
s.runVec = runpin("runVec", [0n, 109286892926322n, 1n, [0n, [0n, s.rowApply, [0n, [s.idx, 0n], 1n]], [0n, [s.drop, 1n], 1n]]]);
s.rebuild = runpin("rebuild", [0n, 28266697867814258n, 1n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 1n]], 1n], [0n, s.runVec, [0n, [0n, s.map, 0n], 1n]]]]);
s.tabLen = run("tabLen", s.len);
s.tabIdx = runpin("tabIdx", [0n, 132372123246964n, 2n, [1n, [0n, [0n, s.elemIdx, 1n], [0n, s.cdr, [0n, s.head, 2n]]], [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], [2n, 0n]], [0n, [0n, s.idx, [0n, s.cdr, 3n]], 2n]]]]);
s.look = runpin("look", [0n, 1802465132n, 2n, [0n, [0n, s.tabIdx, 2n], 1n]]);
s.tabKeys = runpin("tabKeys", [0n, 32503098285121908n, 1n, [0n, s.cdr, [0n, s.head, 1n]]]);
s.tabVals = runpin("tabVals", [0n, 32488787638641012n, 1n, [0n, [0n, s.map, [0n, s.look, 1n]], [0n, s.tabKeys, 1n]]]);
s.hasKey = runpin("hasKey", [0n, 133475964510568n, 2n, [0n, [0n, s.has, 1n], [0n, s.tabKeys, 2n]]]);
s.tabSwitch = runpin("tabSwitch", [0n, 1925627852534067650932n, 3n, [0n, [0n, [0n, s.__if, [0n, s.not, [0n, [0n, s.hasKey, 1n], 3n]]], 2n], [0n, [0n, s.tabIdx, 1n], 3n]]]);
s.tabMatch = runpin("tabMatch", [0n, 7521983763897803124n, 3n, [0n, [0n, [0n, s.tabSwitch, [0n, [s.idx, 0n], 1n]], 2n], 3n]]);
s.tabFromPairs = runpin("tabFromPairs", [0n, 35729091316501037923933774196n, 1n, [1n, [0n, [s.sortOn, [s.idx, 0n]], 1n], [0n, [0n, s.rowRepel, [0n, [0n, [0n, 0n], [0n, 3n, [0n, s.len, 2n]]], [0n, [s.map, [s.idx, 0n]], 2n]]], [0n, [s.map, [s.idx, 1n]], 2n]]]]);
s.tabToPairs = runpin("tabToPairs", [0n, 545182667793297899151732n, 1n, [0n, s.listToRow, [0n, [0n, s.listZip, [0n, s.listFromRow, [0n, s.tabKeys, 1n]]], [0n, s.listFromRow, 1n]]]]);
s.tabToPairList = runpin("tabToPairList", [0n, 9226184926005552341199528026484n, 1n, [0n, [0n, s.listMap, [0n, [0n, 0n, 2n, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, s.look, 1n], 2n]], 2n]], 1n]], [0n, s.listFromRow, [0n, s.tabKeys, 1n]]]]);
s.tabToList = runpin("tabToList", [0n, 2148138574778265133428n, 1n, [0n, s.listFromRow, [0n, s.tabToPairs, 1n]]]);
s.tabMut = runpin("tabMut", [0n, 128047158288756n, 3n, [1n, [0n, [0n, s.elemIdx, 1n], [0n, s.tabKeys, 3n]], [0n, [0n, [0n, s.__if, [0n, s.isNat, 4n]], [0n, s.tabFromPairs, [0n, [0n, s.weld, [0n, [0n, 0n, 2n, 0n], [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]]], [0n, s.tabToPairs, 3n]]]], [0n, [0n, [0n, s.mut, [0n, s.cdr, 4n]], 2n], 3n]]]]);
s.tabPut = runpin("tabPut", [0n, 128047208620404n, 3n, [0n, [0n, [0n, s.tabMut, 2n], 3n], 1n]]);

s.isDigit = runpin("isDigit", [0n, 32766990167077737n, 1n, [0n, [0n, s.and, [0n, [0n, s.gte, 1n], 48n]], [0n, [0n, s.lte, 1n], 57n]]]);
s.isUpper = runpin("isUpper", [0n, 32199680940405609n, 1n, [0n, [0n, s.and, [0n, [0n, s.gte, 1n], 65n]], [0n, [0n, s.lte, 1n], 90n]]]);
s.isLower = runpin("isLower", [0n, 32199710987809641n, 1n, [0n, [0n, s.and, [0n, [0n, s.gte, 1n], 97n]], [0n, [0n, s.lte, 1n], 122n]]]);
s.isAlpha = runpin("isAlpha", [0n, 27417904802788201n, 1n, [0n, [0n, s.or, [0n, s.isUpper, 1n]], [0n, s.isLower, 1n]]]);
s.cordWeld = runpin("cordWeld", [0n, 7236270127299325795n, 2n, [0n, [0n, s.add, 1n], [0n, [0n, s.lsh, 2n], [0n, [0n, s.roundUp, [0n, s.met, 1n]], 8n]]]]);
s.cordCat = runpin("cordCat", [0n, 32758039374360419n, 1n, [0n, [s.foldl, s.cordWeld, 0n], 1n]]);
s.cordTake = runpin("cordTake", [0n, 7308041835429130083n, 2n, [0n, [0n, s.takeBits, [0n, [s.mul, 8n], 1n]], 2n]]);
s.cordDrop = runpin("cordDrop", [0n, 8101819892731375459n, 2n, [0n, [0n, s.rsh, 2n], [0n, [s.mul, 8n], 1n]]]);
s.cordToList = runpin("cordToList", [0n, 549923475143235908824931n, 1n, [0n, [0n, [0n, s.__if, [0n, s.not, 1n]], [2n, 0n]], [0n, [0n, s.CONS, [0n, [0n, s.mod, 1n], 256n]], [0n, 0n, [0n, [0n, s.div, 1n], 256n]]]]]);
s.cordFromList = runpin("cordFromList", [0n, 36039784866850608361046699875n, 1n, [0n, [s.listFoldl, s.cordWeld, 0n], 1n]]);
s.cordToRow = runpin("cordToRow", [0n, 2203184141065990074211n, 1n, [0n, s.listToRow, [0n, s.cordToList, 1n]]]);
s.cordFromRow = runpin("cordFromRow", [0n, 144387875732400565799513955n, 1n, [0n, s.cordCat, 1n]]);
s.showNat = runpin("showNat", [0n, 32758086937569395n, 1n, [0n, s.cordCat, [0n, s.digits, 1n]]]);
s.FAIL = runpin("FAIL", [0n, 1279869254n, 2n, [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]]]);
s.NODE = runpin("NODE", [0n, 1162104654n, 2n, [0n, [0n, [0n, [0n, 0n, 4n, 0n], 2n], 1n], [2n, 0n]]]);
s.HEIR = runpin("HEIR", [0n, 1380533576n, 3n, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], 3n], 2n], 1n], [2n, 0n]]]);
s.WORD = runpin("WORD", [0n, 1146244951n, 1n, [0n, [0n, [0n, 0n, 3n, 0n], 1n], [2n, 1n]]]);
s.CORD = runpin("CORD", [0n, 1146244931n, 1n, [0n, [0n, [0n, 0n, 3n, 0n], 1n], 2n]]);
s.PAGE = runpin("PAGE", [0n, 1162297680n, 1n, [0n, [0n, [0n, 0n, 3n, 0n], 1n], 3n]]);
s.EBED = runpin("EBED", [0n, 1145389637n, 1n, [0n, [0n, [0n, 0n, 3n, 0n], 1n], 4n]]);
s.mkHeir = runpin("mkHeir", [0n, 125796996377453n, 3n, [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 3n]], [0n, [0n, s.NODE, 1n], 2n]], [0n, [0n, [0n, s.HEIR, 1n], 2n], 3n]]]);
s.rexCase = runpin("rexCase", [0n, 28555834228761970n, 6n, [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, 6n, [0n, [s.idx, 1n], 1n]]], [0n, 5n, [0n, [s.idx, 1n], 1n]]], [0n, 4n, [0n, [s.idx, 1n], 1n]]], [0n, 3n, [0n, [s.idx, 1n], 1n]]], [0n, [0n, [0n, 2n, [0n, [s.idx, 1n], 1n]], [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]]]]]);
s.rexGetNode = runpin("rexGetNode", [0n, 478811709653169854768498n, 3n, [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], 2n], [0n, [0n, [0n, 3n, [0n, [s.idx, 1n], 1n]], [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]]]]]);
s.rexGetWord = runpin("rexGetWord", [0n, 474347600120606933673330n, 3n, [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], [0n, 3n, [0n, [s.idx, 1n], 1n]]], 2n]]]);
s.rexGetText = runpin("rexGetText", [0n, 550015422890598204990834n, 3n, [1n, [0n, [0n, 0n, 2n, 1n], 2n], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], [0n, 3n, [0n, [s.idx, 1n], 1n]]], 2n], 2n]]]]);
s.isWord = runpin("isWord", [0n, 110442657051497n, 1n, [0n, [s.eql, 1n], [0n, [s.idx, 0n], 1n]]]);
s.mergeHeir = runpin("mergeHeir", [0n, 2110523380349883540845n, 2n, [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 2n]], 1n], [0n, [0n, s.weld, 1n], [0n, [0n, 0n, 2n, 0n], 2n]]]]);
s.rexGetNodeFolded = runpin("rexGetNodeFolded", [0n, 133449258393243461297705120825695823218n, 3n, [1n, [0n, [0n, 0n, 2n, 1n], 2n], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], 2n], [0n, [0n, 3n, [0n, [s.idx, 1n], 1n]], [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]]]]]]]);
//s.WEIRD = runpin("WEIRD", [0n, 96n, 4n, [1n, [0n, [0n, s.mergeHeir, 3n], 4n], [0n, [0n, [0n, s.__if, [0n, [s.neq, 1n], [0n, s.len, 5n]]], [0n, [0n, s.FAIL, [0n, [0n, [s.HEIR, 96n], 3n], 4n]], 653087462678048266143727334793659476324522162245n]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.EBED, [0n, [s.idx, 0n], 5n]]], [2n, 0n]]]]]]);
s.rexType = runpin("rexType", [0n, 28552639058306418n, 1n, [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 1145389637n], 1162297680n], 1415071060n], 1163018562n], 1162104654n]]]);
s.w = run("w", s.WORD);
s.eitherRowSequence = runpin("eitherRowSequence", [0n, 34500685841080089597022286214220284717413n, 1n, [0n, [[0n, 1886351212n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [0n, [2n, 1n], [0n, s.listToRowReversed, 1n]]], [0n, [0n, [0n, s.__if, [0n, s.car, [0n, [s.idx, 0n], 2n]]], [0n, [0n, 0n, [0n, [0n, s.CONS, [0n, s.cdr, [0n, [s.idx, 0n], 2n]]], 1n]], [0n, [s.idx, 1n], 2n]]], [0n, [2n, 0n], [0n, s.cdr, [0n, [s.idx, 0n], 2n]]]]]], 0n], [0n, s.listFromRow, 1n]]]);
s.eitherRowTraverse = runpin("eitherRowTraverse", [0n, 34521974258274374513414405538712950958437n, 2n, [0n, s.eitherRowSequence, [0n, [0n, s.map, 1n], 2n]]]);
s.showNat = runpin("showNat", [0n, 32758086937569395n, 1n, [0n, s.cordCat, [0n, s.digits, 1n]]]);
s.natE = runpin("natE", [0n, 1165255022n, 1n, [0n, s.WORD, [0n, s.showNat, 1n]]]);
s.varE = runpin("varE", [0n, 1165123958n, 1n, [0n, s.WORD, 1n]]);
s.cnsE = runpin("cnsE", [0n, 1165192803n, 1n, [0n, s.EBED, 1n]]);
s.barE = runpin("barE", [0n, 1165123938n, 1n, [0n, [s.NODE, 124n], 1n]]);
s.appE2 = runpin("appE2", [0n, 215913361505n, 2n, [0n, [s.NODE, 124n], [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]]]);
s.letE = runpin("letE", [0n, 1165256044n, 3n, [0n, [0n, [s.HEIR, 64n], [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]], 3n]]);
s.recE = runpin("recE", [0n, 1164141938n, 3n, [0n, [0n, [s.HEIR, 16448n], [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]], 3n]]);
s.txtE = runpin("txtE", [0n, 1165260916n, 1n, [0n, s.CORD, 1n]]);
s.appE = runpin("appE", [0n, 1164996705n, 1n, [0n, [0n, [0n, s.__if, [0n, [s.eql, 1n], [0n, s.len, 1n]]], [0n, [s.idx, 0n], 1n]], [0n, [s.NODE, 124n], 1n]]]);
s.isSymbolChar = runpin("isSymbolChar", [0n, 35399049293995600347051291497n, 1n, [0n, [0n, s.or, [0n, [s.eql, 95n], 1n]], [0n, [0n, s.or, [0n, s.isAlpha, 1n]], [0n, s.isDigit, 1n]]]]);
s.isSymbol = runpin("isSymbol", [0n, 7813572100837569385n, 1n, [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 1n]], [2n, 0n]], [1n, [0n, s.cordToRow, 1n], [0n, [0n, s.and, [0n, s.not, [0n, s.isDigit, [0n, [s.idx, 0n], 2n]]]], [0n, [s.all, s.isSymbolChar], 2n]]]]]);
s.getSymbol = runpin("getSymbol", [0n, 2000274457814417827175n, 2n, [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 11740429177913567546618662371055056656179262738105091696941216574246333249319520n], 1n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 3n], 3n], 3n], [1n, [0n, [s.idx, 1n], 1n], [0n, [0n, [0n, s.ifNot, [0n, s.isSymbol, 4n]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 44607611010848201136568426267717454290258964491724294649500036681n], 1n]]], [0n, 2n, 4n]]]], 3n]]]]);
s.readSymbol = runpin("readSymbol", [0n, 512070261200490695058802n, 1n, [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 11740429177913567546618662371055056656179262738105091696941216574246333249319520n], 1n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], [1n, [0n, [s.idx, 1n], 1n], [0n, [0n, [0n, s.ifNot, [0n, s.isSymbol, 3n]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 44607611010848201136568426267717454290258964491724294649500036681n], 1n]]], [0n, s.RIGHT, 3n]]]], 2n]]]]);
s.readNodeMerged = runpin("readNodeMerged", [0n, 2036275020031049495251865422620018n, 3n, [1n, [0n, [0n, 0n, 2n, 1n], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [1n, [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, s.len, 2n]], [0n, s.len, 5n]]], [0n, [0n, s.FAIL, 1n], [0n, s.cordCat, [0n, [0n, [[0n, 0n, 4n, 0n], 495605869344n], [0n, s.showNat, [0n, s.len, 2n]]], 153023698109607709800517n]]]], [1n, [0n, s.eitherRowSequence, [0n, [0n, [s.zipWith, s.apply], 2n], 5n]], [0n, [0n, [0n, s.__if, [0n, s.car, 6n]], [0n, [0n, s.rowApply, 3n], [0n, s.cdr, 6n]]], 6n]]]]]]]]);
s.readRowOfNames = runpin("readRowOfNames", [0n, 2340513000335989705809604372424050n, 2n, [1n, [0n, [0n, s.cordWeld, 1n], 418377346866024820505133833246721349489247282775627099810715231214939290859298687284231828041327080796556525281904521248n], [1n, [0n, [0n, [0n, 0n, 3n, [0n, [0n, s.FAIL, 1n], 2n]], 2n], 3n], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 2n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, [0n, s.FAIL, 2n], 3n]], [0n, [0n, s.FAIL, 2n], 3n]], [0n, [0n, s.FAIL, 2n], 3n]], [1n, [0n, s.readSymbol, 2n], [0n, [0n, [0n, s.__if, [0n, s.car, 5n]], [0n, [s.idx, 0n], [0n, s.cdr, 5n]]], 5n]]], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, [s.idx, 1n], 2n]], 44n]], [0n, [0n, s.FAIL, 2n], 3n]], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, [s.idx, 3n], 2n]], [2n, 0n]]], [0n, [0n, s.FAIL, 2n], 13247970192364794533078997310140780825122054390594843940057209400560003891159406n]], [0n, [s.eitherRowTraverse, s.readSymbol], [0n, [s.idx, 2n], 2n]]]]]]]]]);
s.showNat = runpin("showNat", [0n, 32758086937569395n, 1n, [0n, s.cordCat, [0n, s.digits, 1n]]]);
s.gensymE = runpin("gensymE", [0n, 19542141788120423n, 1n, [0n, s.WORD, [0n, [s.cordWeld, 26463n], [0n, s.showNat, 1n]]]]);
s.vecE = runpin("vecE", [0n, 1164141942n, 1n, [0n, [s.NODE, 44n], 1n]]);
s.tabE = runpin("tabE", [0n, 1164075380n, 1n, [0n, [s.NODE, 37n], [0n, [0n, 0n, 2n, 0n], [0n, s.vecE, [0n, [0n, s.turn, [0n, s.tabToPairs, 1n]], [0n, 0n, 1n, [0n, [s.NODE, 61n], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [s.idx, 1n], 1n]], [0n, s.WORD, [0n, s.showNat, [0n, [s.idx, 0n], 1n]]]]]]]]]]]);
s.simpleMacro = runpin("simpleMacro", [0n, 134730948995305986495179123n, 7n, [1n, [0n, [0n, s.mergeHeir, 6n], 7n], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, s.len, 2n]], [0n, s.len, 8n]]], [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cordCat, [0n, [0n, [[0n, 0n, 4n, 0n], 139566690543111085655945248n], [0n, s.showNat, [0n, s.len, 2n]]], 153023698109607709800517n]]], [0n, [0n, [0n, s.mkHeir, 1n], 6n], 7n]]]], [1n, [0n, s.eitherRowSequence, [0n, [0n, [s.zipWith, s.apply], 2n], 8n]], [0n, [0n, [0n, s.__if, [0n, s.car, 9n]], [1n, [0n, [0n, s.rowApply, 3n], [0n, s.cdr, 9n]], [0n, [0n, [0n, s.__if, [0n, s.car, 10n]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cdr, 10n]], [2n, 0n]]]], 10n]]], 9n]]]]]);
s.gensymMacro = runpin("gensymMacro", [0n, 134730948995314838473172327n, 7n, [1n, [0n, [0n, s.mergeHeir, 6n], 7n], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, s.len, 2n]], [0n, s.len, 8n]]], [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cordCat, [0n, [0n, [[0n, 0n, 4n, 0n], 139566690543111085655945248n], [0n, s.showNat, [0n, s.len, 2n]]], 153023698109607709800517n]]], [0n, [0n, [0n, s.mkHeir, 1n], 6n], 7n]]]], [1n, [0n, s.eitherRowSequence, [0n, [0n, [s.zipWith, s.apply], 2n], 8n]], [0n, [0n, [0n, s.__if, [0n, s.car, 9n]], [0n, [0n, s.rowApply, [0n, 3n, 5n]], [0n, s.cdr, 9n]]], 9n]]]]]);
s.toPad = runpin("toPad", [0n, 431129390964n, 1n, [0n, [0n, [0n, s.__if, 1n], 1n], [2n, 1n]]]);
s.padNat = runpin("padNat", [0n, 127961275851120n, 1n, [1n, [0n, s.toPad, 1n], [0n, [0n, s.sub, 2n], [0n, s.bex, [0n, s.dec, [0n, s.met, 2n]]]]]]);
s.padWeld = runpin("padWeld", [0n, 28266680184758640n, 2n, [1n, [0n, s.toPad, 1n], [1n, [0n, s.dec, [0n, s.met, 3n]], [0n, [0n, s.add, [0n, [0n, s.sub, 3n], [0n, s.bex, 4n]]], [0n, [0n, s.lsh, [0n, s.toPad, 2n]], 4n]]]]]);
s.natPad = runpin("natPad", [0n, 110369124409710n, 2n, [0n, [0n, s.padWeld, [0n, [0n, s.add, 1n], [0n, s.bex, [0n, s.met, 1n]]]], [0n, s.bex, [0n, [0n, s.sub, 2n], [0n, s.met, 1n]]]]]);
s.padLen = runpin("padLen", [0n, 121381352399216n, 1n, [0n, s.dec, [0n, s.met, 1n]]]);
s.padFromBinary = runpin("padFromBinary", [0n, 9622006742552128653599428600176n, 1n, [0n, [0n, [[0n, 1886351212n, 3n, [0n, [0n, s.seq, 1n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], 1n], [0n, [0n, [0n, 0n, [0n, [0n, [0n, s.__if, [0n, [s.idx, 0n], 2n]], [0n, [0n, s.add, 3n], 1n]], 1n]], [0n, [s.idx, 1n], 2n]], [0n, [s.mul, 2n], 3n]]]]], 0n], [0n, s.listFromRow, [0n, [0n, s.weld, [0n, [s.map, [s.eql, 49n]], [0n, s.cordToRow, 1n]]], [[0n, 0n, 2n, 0n], 1n]]]], [2n, 1n]]]);
//s.WEIRD = runpin("WEIRD", [0n, 28707n, 4n, [1n, [0n, [0n, [s.HEIR, 35n], [0n, [0n, s.weld, [0n, s.WORD, 28707n]], 3n]], 4n], [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 12048958699201562188367464726311766945339034944626384212481144813637n], 5n]], [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 222234147606476324654871115792383618986692771730713525988952433150125795203324514033986n], 5n]], [0n, [0n, [0n, s.__if, [0n, [s.neq, 0n], 4n]], 6n], [0n, [0n, [0n, s.__if, [0n, [s.neq, 1n], [0n, s.len, 3n]]], 6n], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], [0n, [s.idx, 0n], 3n]]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 7n], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cnsE, [0n, s.padFromBinary, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 3n]]]]], [2n, 0n]]]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cnsE, [0n, s.padFromBinary, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 3n]]]]], [2n, 0n]]]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cnsE, [0n, s.padFromBinary, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 3n]]]]], [2n, 0n]]]], 7n]]]]]]]]);
s.showSymbol = runpin("showSymbol", [0n, 512070261200491014744179n, 1n, 1n]);
//s.WEIRD = runpin("WEIRD", [0n, 35n, 4n, [1n, [0n, [0n, [s.HEIR, 35n], 3n], 4n], [0n, [0n, [0n, s.__if, [0n, [0n, s.lth, [0n, s.len, 3n]], [2n, 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 693016710835812929063136036648964934168172908469190366061844217652387875n], 5n]]], [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 838099680734180491107835469570019902275419645358989215787837872444975470339367383123166680475974n], 5n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], [0n, [s.idx, 0n], 3n]]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 6n], 6n], 6n], [1n, [0n, [s.cordWeld, 35n], [0n, [s.idx, 1n], [0n, [s.idx, 0n], 3n]]], [0n, [0n, [0n, s.__if, [0n, s.not, [0n, [0n, s.hasKey, 7n], 1n]]], [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [s.cordWeld, 2807473662062587950904898525226088060448341n], [0n, s.showSymbol, 7n]]], 5n]]], [0n, [0n, [0n, [0n, [0n, [0n, s.look, 1n], 7n], 1n], 2n], [0n, [s.drop, 1n], 3n]], 4n]]]], 6n]]]]]]);
//s.WEIRD = runpin("WEIRD", [0n, 1869571619n, 4n, [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cnsE, [0n, [0n, [0n, [0n, 0n, 4n, [[0n, 0n, 4n, 0n], 1954047342n, 1935960427n, 1919509864n]], 2n], 3n], 4n]]], [2n, 0n]]]]);
//%[heir=[1 %zaz] kids=[[1 %bar]] next=0]
s.readSignature = runpin("readSignature", [0n, 8037467698973027977498336519538n, 1n, [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 729730329676193969789247814650776992104327609540353301445919856456882307904618657861n], 1n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 11740429177913567546618662371055056656179262738105091696941216574246333249319520n], 1n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 3n], 3n], 3n], [1n, [0n, [s.idx, 1n], 1n], [0n, [0n, [0n, s.ifNot, [0n, s.isSymbol, 4n]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 44607611010848201136568426267717454290258964491724294649500036681n], 1n]]], [0n, s.RIGHT, [0n, [0n, 0n, 2n, 0n], 4n]]]]], 3n]]]], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, [s.idx, 1n], 1n]], 124n]], 2n], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, [s.idx, 3n], 1n]], [2n, 0n]]], 2n], [0n, [s.eitherRowTraverse, s.readSymbol], [0n, [s.idx, 2n], 1n]]]]]]]]);
s.readBinder = runpin("readBinder", [0n, 540220137035969322902898n, 1n, [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 35403866900798217977070907214n], 1n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], 2n], [1n, [0n, [s.idx, 3n], 1n], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, [s.idx, 1n], 1n]], 11580n]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 789532614797393109261068607268103745844786512696143069386222501868107845n], 1n]]], [0n, s.RIGHT, [0n, [0n, s.weld, [0n, [s.idx, 2n], 1n]], [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 3n]], [0n, 0n, 1n, 0n]], [0n, [0n, 0n, 2n, 0n], 3n]]]]]]]]]]);
//s.WEIRD = runpin("WEIRD", [0n, 58n, 4n, [1n, [0n, [0n, [s.HEIR, 58n], 3n], 4n], [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 4n]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 133449542111202319000041812060258526536n], 5n]]], [0n, [0n, [0n, s.__if, [0n, [s.neq, 2n], [0n, s.len, 3n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 11057612439927644740621263628656522817269567346531399749n], 5n]]], [0n, [0n, [0n, s.readNodeMerged, 5n], [[0n, 0n, 4n, 0n], s.RIGHT, s.readBinder, s.readSignature]], [0n, 0n, 3n, [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, [s.HEIR, 33n], 2n], [0n, [0n, [s.HEIR, 38n], [0n, [0n, 0n, 2n, 0n], [0n, [s.NODE, 124n], [0n, [s.map, s.WORD], 1n]]]], 3n]]], [2n, 0n]]]]]]]]]);
s.getRexRune = runpin("getRexRune", [0n, 478996610569769315493223n, 2n, [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, 2n, [0n, [s.idx, 1n], 1n]]]]]);
s.parseOpenRow = runpin("parseOpenRow", [0n, 36963296205220159927969014128n, 1n, [1n, [0n, s.RIGHT, [0n, [0n, s.CONS, 1n], [2n, 0n]]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], 2n], [1n, [0n, [s.idx, 2n], 1n], [1n, [0n, [s.idx, 3n], 1n], [0n, [0n, [0n, s.__if, [0n, [s.neq, 11308n], [0n, [s.idx, 1n], 1n]]], 2n], [0n, [0n, [0n, s.__if, [0n, s.__null, 3n]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 10572962009840499720490199941297522498147542300782755114360646956097n], 1n]]], [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 4n]], [0n, s.RIGHT, [0n, [0n, s.CONS, [0n, [s.NODE, 124n], 3n]], [2n, 0n]]]], [1n, [0n, 0n, 4n], [0n, [0n, [0n, s.__if, [0n, s.car, 5n]], [0n, s.RIGHT, [0n, [0n, s.CONS, [0n, [s.NODE, 124n], 3n]], [0n, s.cdr, 5n]]]], 5n]]]]]]]]]]]);
//s.WEIRD = runpin("WEIRD", [0n, 11308n, 4n, [1n, [0n, s.parseOpenRow, [0n, [0n, [s.HEIR, 11308n], 3n], 4n]], [0n, [0n, [0n, s.__if, [0n, s.car, 5n]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [s.NODE, 44n], [0n, s.listToRow, [0n, s.cdr, 5n]]]], [2n, 0n]]]], 5n]]]);
s.isBar = runpin("isBar", [0n, 491258016617n, 1n, [1n, [0n, s.cdr, 1n], [0n, s.rowAnd, [0n, [0n, [0n, [0n, [0n, [0n, [0n, 0n, 7n, 0n], [0n, [s.eql, 0n], [0n, [0n, s.mod, [0n, s.padLen, 2n]], 8n]]], [0n, [s.neq, 0n], 2n]], [0n, s.isNat, 2n]], [0n, [s.eql, 1n], [0n, s.funArgs, 1n]]], [0n, [s.eql, 1n], [0n, s.funName, 1n]]], [0n, s.isFun, 1n]]]]]);
s.byteWidth = runpin("byteWidth", [0n, 1926848327895949277538n, 1n, [0n, [[0n, 1886351212n, 2n, [0n, [0n, s.seq, 1n], [0n, [0n, [0n, s.ifNot, 2n], 1n], [0n, [0n, 0n, [0n, 3n, 1n]], [0n, [0n, s.rsh, 2n], 8n]]]]], 0n], 1n]]);
s.barTrail = runpin("barTrail", [0n, 7811882172321784162n, 1n, [0n, [[0n, 1886351212n, 2n, [0n, [0n, s.seq, 1n], [0n, [0n, [0n, s.__if, [0n, [0n, s.or, [0n, [s.eql, 1n], 2n]], [0n, [s.eql, 0n], 2n]]], 1n], [0n, [0n, 0n, [0n, [0n, [0n, s.ifNot, [0n, [0n, s.mod, 2n], 8n]], [0n, 3n, 1n]], [2n, 0n]]], [0n, [0n, s.rsh, 2n], 8n]]]]], 0n], 1n]]);
s.barEnc = runpin("barEnc", [0n, 109325262676322n, 2n, [0n, [0n, s.add, 2n], [0n, s.bex, [0n, [s.mul, 8n], [0n, [0n, s.add, 1n], [0n, s.byteWidth, 2n]]]]]]);
s.barDec = runpin("barDec", [0n, 109286591193442n, 1n, [0n, [0n, s.sub, 1n], [0n, s.bex, [0n, [s.mul, 8n], [0n, s.dec, [0n, s.byteWidth, 1n]]]]]]);
s.mkBar = runpin("mkBar", [0n, 491258014573n, 2n, [0n, [2n, [0n, 1n, 1n]], [0n, [0n, s.barEnc, 1n], 2n]]]);
s.natBar = runpin("natBar", [0n, 125762052317550n, 1n, [0n, [s.mkBar, 0n], 1n]]);
s.barNat = runpin("barNat", [0n, 127961276768610n, 1n, [0n, s.barDec, [0n, s.cdr, 1n]]]);
s.barLen = runpin("barLen", [0n, 121381353316706n, 1n, [0n, [0n, s.div, [0n, s.padLen, [0n, s.cdr, 1n]]], 8n]]);
s.barIdx = runpin("barIdx", [0n, 132372124295522n, 2n, [0n, [0n, [0n, 1886351212n, 2n, [0n, [0n, [0n, s.__if, [0n, s.not, 1n]], [0n, [0n, s.mod, 2n], 256n]], [0n, [0n, [0n, s.__if, [0n, s.not, 2n]], [2n, 0n]], [0n, [0n, 0n, [0n, s.dec, 1n]], [0n, [0n, s.div, 2n], 256n]]]]], 1n], [0n, s.barNat, 2n]]]);
s.zEnd = runpin("zEnd", [0n, 1684948346n, 1n, [0n, [0n, [0n, [0n, 1886351212n, 3n, [0n, [0n, [0n, s.__if, [0n, [0n, s.get, 1n], 3n]], 2n], [0n, [0n, [0n, s.ifNot, 3n], [0n, [2n, 3n], 2n]], [0n, [0n, [0n, 0n, 1n], [0n, [2n, 3n], 2n]], [0n, s.dec, 3n]]]]], 1n], [2n, 0n]], [0n, s.dec, [0n, s.len, 1n]]]]);
s.barHas = runpin("barHas", [0n, 126861664477538n, 2n, [0n, [0n, [0n, [0n, [0n, 1886351212n, 4n, [0n, [0n, [0n, s.__if, [0n, [0n, s.eql, 4n], 3n]], [2n, 0n]], [0n, [0n, [0n, s.__if, [0n, [0n, s.eql, 1n], [0n, [0n, s.barIdx, 4n], 2n]]], [2n, 1n]], [0n, [0n, [0n, [0n, 0n, 1n], 2n], 3n], [0n, [2n, 3n], 4n]]]]], 1n], 2n], [0n, s.barLen, 2n]], [2n, 0n]]]);
s.stripZEnd = runpin("stripZEnd", [0n, 1852620263927372215411n, 1n, [0n, [0n, s.take, [0n, [0n, s.sub, [0n, s.len, 1n]], [0n, s.zEnd, 1n]]], 1n]]);
s.w8 = runpin("w8", [0n, 14455n, 1n, [0n, [0n, s.mod, 1n], 256n]]);
s.bytesBar = runpin("bytesBar", [0n, 8241941856455522658n, 1n, [1n, [0n, s.zEnd, 1n], [0n, [0n, s.mkBar, 2n], [0n, [s.foldr, [0n, 0n, 2n, [0n, [0n, s.add, 1n], [0n, [0n, s.lsh, 2n], 8n]]], 0n], [0n, [s.map, s.w8], [0n, [0n, s.take, [0n, [0n, s.sub, [0n, s.len, 1n]], 2n]], 1n]]]]]]);
s.barGen = runpin("barGen", [0n, 121381269430626n, 2n, [0n, s.bytesBar, [0n, [0n, s.gen, 1n], 2n]]]);
s.barGet = runpin("barGet", [0n, 127978339197282n, 2n, [0n, [0n, s.barIdx, 2n], 1n]]);
s.barBytes = runpin("barBytes", [0n, 8315180351164146018n, 1n, [0n, [0n, s.gen, [0n, s.barLen, 1n]], [0n, s.barGet, 1n]]]);
s.barFoldl = runpin("barFoldl", [0n, 7810486878946353506n, 3n, [0n, [0n, [0n, s.foldl, 1n], 2n], [0n, s.barBytes, 3n]]]);
s.barFoldr = runpin("barFoldr", [0n, 8242832443173921122n, 3n, [0n, [0n, [0n, s.foldr, 1n], 2n], [0n, s.barBytes, 3n]]]);
s.barWeld = runpin("barWeld", [0n, 28266680185676130n, 2n, [0n, [2n, [0n, 1n, 1n]], [0n, [0n, s.padWeld, [0n, s.cdr, 1n]], [0n, s.cdr, 2n]]]]);
s.emptyBar = run("emptyBar", [0n, 1n, 1n, 1n]);
s.barCat = runpin("barCat", [0n, 127961092219234n, 1n, [0n, [s.foldr, s.barWeld, [0n, 1n, 1n, 1n]], 1n]]);
s.barIntercalate = runpin("barIntercalate", [0n, 2057743987890318584455503480512866n, 2n, [0n, [0n, [0n, [0n, 28519n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], 2n], [1n, [0n, [s.idx, 0n], 3n], [1n, [0n, [s.idx, 1n], 3n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 5n]], [0n, [0n, s.barWeld, 2n], 4n]], [0n, [0n, [0n, 0n, 1n], [0n, s.barCat, [0n, [0n, [0n, [0n, 0n, 4n, 0n], 1n], 4n], 2n]]], 5n]]]]]], 1n], [0n, 1n, 1n, 1n]], [0n, s.listFromRow, 2n]]]);
s.hexCharToNat = runpin("hexCharToNat", [0n, 36017897342037936163075417448n, 1n, [0n, [0n, [0n, s.__if, [0n, [0n, s.lte, 1n], 57n]], [0n, [0n, s.sub, 1n], 48n]], [0n, [s.add, 10n], [0n, [0n, s.sub, [0n, [0n, s.min, 1n], 102n]], 97n]]]]);
s.barFromHex = runpin("barFromHex", [0n, 568552318045881881485666n, 1n, [1n, [0n, [s.map, s.hexCharToNat], [0n, s.cordToRow, 1n]], [0n, [0n, [[0n, 1886351212n, 3n, [0n, [0n, s.seq, 1n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [0n, [2n, [0n, 1n, 1n]], 1n]], [0n, [0n, [0n, s.__if, [0n, s.isNat, [0n, [s.idx, 1n], 2n]]], [0n, s.die, 478958354455822697786729n]], [0n, [0n, [0n, 0n, [0n, [0n, s.add, 1n], [0n, [0n, s.add, [0n, [0n, s.mul, 3n], [0n, [s.idx, 0n], [0n, [s.idx, 1n], 2n]]]], [0n, [0n, s.mul, 3n], [0n, [s.mul, 16n], [0n, [s.idx, 0n], 2n]]]]]], [0n, [s.idx, 1n], [0n, [s.idx, 1n], 2n]]], [0n, [s.mul, 256n], 3n]]]]]], 0n], [0n, s.listFromRow, [0n, s.cat, [0n, [0n, [[0n, 0n, 4n, 0n], [[0n, 0n, 3n, 0n], 1n, 0n]], 2n], [0n, [0n, [0n, s.__if, [0n, s.even, [0n, s.len, 2n]]], [0n, 0n, 1n, 0n]], [[0n, 0n, 2n, 0n], 0n]]]]]], [2n, 1n]]]]);
s.barPad = runpin("barPad", [0n, 110369124278626n, 1n, [0n, s.cdr, 1n]]);
s.barLit = runpin("barLit", [0n, 127995602952546n, 6n, [1n, [0n, [0n, [s.HEIR, 35n], [0n, [0n, s.weld, [0n, s.WORD, 1n]], 5n]], 6n], [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 222234147606476324654871115792383618986692771730713525988952433150125795203324514033986n], 7n]], [1n, [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 6n]], 5n], [0n, [0n, s.weld, 5n], [0n, [0n, 0n, 2n, 0n], 6n]]], [0n, [0n, [0n, s.__if, [0n, [s.neq, 1n], [0n, s.len, 9n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 153382587341578855782497640668866836549n], 7n]]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], [0n, [s.idx, 0n], 9n]]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 8n], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cnsE, [0n, 2n, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 9n]]]]], [2n, 0n]]]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cnsE, [0n, 2n, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 9n]]]]], [2n, 0n]]]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cnsE, [0n, 2n, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 9n]]]]], [2n, 0n]]]], 8n]]]]]]]);
//s.WEIRD = run("WEIRD", [s.barLit, 98n, s.natBar]);
//s.WEIRD = run("WEIRD", [s.barLit, 120n, s.barFromHex]);
s.barFlat = runpin("barFlat", [0n, 32758214964699490n, 1n, [0n, [0n, [0n, s.__if, [0n, s.isBar, 1n]], 1n], [0n, [0n, [0n, s.__if, [0n, s.isApp, 1n]], [0n, s.barCat, [0n, [0n, s.map, 0n], 1n]]], [0n, 1n, 1n, 1n]]]]);
s.checkBar = runpin("checkBar", [0n, 8241941822061242467n, 3n, [1n, [0n, [0n, s.barEnc, 2n], 3n], [0n, [0n, s.and, [0n, [0n, s.eql, 4n], 1n]], [0n, [0n, s.and, [0n, [0n, s.eql, 2n], [0n, s.barTrail, 4n]]], [0n, [0n, s.eql, 3n], [0n, s.barDec, 4n]]]]]]);
s.bex32 = run("bex32", 4294967296n);
s.bex31 = run("bex31", 2147483648n);
s.wMax32 = run("wMax32", 4294967295n);
s.wMin32 = run("wMin32", 0n);
s.iMax32 = run("iMax32", 2147483647n);
s.iMin32 = run("iMin32", 2147483648n);
s.w32 = runpin("w32", [0n, 3289975n, 1n, [0n, [0n, s.mod, 1n], 4294967296n]]);
s.i32 = runpin("i32", [0n, 3289961n, 1n, [0n, [0n, s.mod, 1n], 4294967296n]]);
s.inc32 = runpin("inc32", [0n, 215610519145n, 1n, [0n, s.w32, [0n, 3n, 1n]]]);
s.dec32 = runpin("dec32", [0n, 215610516836n, 1n, [0n, [2n, 4294967295n, [0n, 0n, 1n, 1n]], 1n]]);
s.add32 = runpin("add32", [0n, 215610582113n, 2n, [0n, s.w32, [0n, [0n, s.add, [0n, s.w32, 1n]], [0n, s.w32, 2n]]]]);
s.mul32 = runpin("mul32", [0n, 215611110765n, 2n, [0n, s.w32, [0n, [0n, s.mul, [0n, s.w32, 1n]], [0n, s.w32, 2n]]]]);
s.div32 = runpin("div32", [0n, 215611763044n, 2n, [0n, [0n, s.div, [0n, s.w32, 1n]], [0n, s.w32, 2n]]]);
s.not32 = runpin("not32", [0n, 215611633518n, 1n, [0n, s.not, [0n, s.w32, 1n]]]);
s.lth32 = runpin("lth32", [0n, 215610848364n, 2n, [0n, [0n, s.lth, [0n, s.w32, 1n]], [0n, s.w32, 2n]]]);
s.gth32 = runpin("gth32", [0n, 215610848359n, 2n, [0n, [0n, s.gth, [0n, s.w32, 1n]], [0n, s.w32, 2n]]]);
s.lte32 = runpin("lte32", [0n, 215610651756n, 2n, [0n, [0n, s.lte, [0n, s.w32, 1n]], [0n, s.w32, 2n]]]);
s.gte32 = runpin("gte32", [0n, 215610651751n, 2n, [0n, [0n, s.gte, [0n, s.w32, 1n]], [0n, s.w32, 2n]]]);
s.eql32 = runpin("eql32", [0n, 215611109733n, 2n, [0n, [0n, s.aeq, [0n, s.w32, 1n]], [0n, s.w32, 2n]]]);
s.and32 = runpin("and32", [0n, 215610584673n, 2n, [0n, [0n, s.dis, [0n, s.w32, 1n]], [0n, s.w32, 2n]]]);
s.or32 = runpin("or32", [0n, 842232431n, 2n, [0n, [0n, s.con, [0n, s.w32, 1n]], [0n, s.w32, 2n]]]);
s.xor32 = runpin("xor32", [0n, 215611502456n, 2n, [0n, [0n, s.mix, [0n, s.w32, 1n]], [0n, s.w32, 2n]]]);
s.lsh32 = runpin("lsh32", [0n, 215610848108n, 2n, [0n, [0n, s.and32, [0n, [0n, s.lsh, [0n, s.w32, 1n]], [0n, s.w32, 2n]]], 4294967295n]]);
s.rsh32 = runpin("rsh32", [0n, 215610848114n, 2n, [0n, [0n, s.and32, [0n, [0n, s.rsh, [0n, s.w32, 1n]], [0n, s.w32, 2n]]], 4294967295n]]);
s.chop32 = runpin("chop32", [0n, 55196511070307n, 1n, [0n, [0n, s.and32, 1n], 4294967295n]]);
s.isZero32 = run("isZero32", s.not32);
s.sub32 = runpin("sub32", [0n, 215610455411n, 2n, [0n, [0n, [0n, s.__if, [0n, [0n, s.lte32, 2n], 1n]], [0n, [0n, s.sub, [0n, s.w32, 1n]], [0n, s.w32, 2n]]], [0n, [0n, s.sub, [0n, [s.add, 4294967296n], 1n]], 2n]]]);
s.ror32 = runpin("ror32", [0n, 215611502450n, 2n, [0n, [0n, s.or32, [0n, [0n, s.rsh32, 1n], 2n]], [0n, [0n, s.lsh32, 1n], [0n, [s.sub32, 32n], 2n]]]]);
s.rol32 = runpin("rol32", [0n, 215611109234n, 2n, [0n, [0n, s.or32, [0n, [0n, s.lsh32, 1n], 2n]], [0n, [0n, s.rsh32, 1n], [0n, [s.sub32, 32n], 2n]]]]);
s.bitFlip32 = runpin("bitFlip32", [0n, 926043782092562917730n, 1n, [0n, [s.sub32, 4294967295n], 1n]]);
s.iNeg32 = runpin("iNeg32", [0n, 55196359413353n, 1n, [0n, s.inc32, [0n, s.bitFlip32, 1n]]]);
s.iIsZero32 = runpin("iIsZero32", [0n, 926043510483461556585n, 1n, [0n, s.not32, 1n]]);
s.iInc32 = runpin("iInc32", [0n, 55196292893033n, 1n, [0n, s.inc32, 1n]]);
s.iAdd32 = runpin("iAdd32", [0n, 55196309012841n, 2n, [0n, [0n, s.add32, 1n], 2n]]);
s.iSub32 = runpin("iSub32", [0n, 55196276577129n, 2n, [0n, [0n, s.add32, 1n], [0n, s.iNeg32, 2n]]]);
s.iMul32 = runpin("iMul32", [0n, 55196444347753n, 2n, [0n, [0n, s.mul32, 1n], 2n]]);
s.iDec32 = runpin("iDec32", [0n, 55196292301929n, 1n, [0n, s.dec32, 1n]]);
s.iEql32 = runpin("iEql32", [0n, 55196444083561n, 2n, [0n, [0n, s.eql32, 1n], 2n]]);
s.iIsNeg32 = runpin("iIsNeg32", [0n, 3617348610514176361n, 1n, [0n, [0n, s.gth32, 1n], 2147483647n]]);
s.iAbs32 = runpin("iAbs32", [0n, 55196560540009n, 1n, [0n, [0n, [0n, s.__if, [0n, s.iIsNeg32, 1n]], [0n, s.iNeg32, 1n]], 1n]]);
s.iDiv32 = runpin("iDiv32", [0n, 55196611331177n, 2n, [1n, [0n, [0n, s.div32, [0n, s.iAbs32, 1n]], [0n, s.iAbs32, 2n]], [0n, [0n, [0n, s.__if, [0n, [0n, [0n, [0n, 0n, 4n, 0n], [0n, s.iIsNeg32, 1n]], [0n, s.iIsNeg32, 1n]], s.xor]], [0n, s.iNeg32, 3n]], 3n]]]);
s.iGth32 = runpin("iGth32", [0n, 55196377171817n, 2n, [0n, [0n, [0n, s.__if, [0n, s.iIsNeg32, 1n]], [0n, [0n, s.and, [0n, s.iIsNeg32, 2n]], [0n, [0n, s.gth32, [0n, s.iNeg32, 2n]], [0n, s.iNeg32, 1n]]]], [0n, [0n, s.or, [0n, s.iIsNeg32, 2n]], [0n, [0n, s.gth32, 1n], 2n]]]]);
s.iGte32 = runpin("iGte32", [0n, 55196326840169n, 2n, [0n, [0n, s.or, [0n, [0n, s.eql32, 1n], 2n]], [0n, [0n, s.iGth32, 1n], 2n]]]);
s.iLte32 = runpin("iLte32", [0n, 55196326841449n, 2n, [0n, [0n, s.iGte32, 2n], 1n]]);
s.iLth32 = runpin("iLth32", [0n, 55196377173097n, 2n, [0n, [0n, s.iGth32, 2n], 1n]]);
s.bex48 = run("bex48", 281474976710656n);
s.bex47 = run("bex47", 140737488355328n);
s.wMax48 = run("wMax48", 281474976710655n);
s.wMin48 = run("wMin48", 0n);
s.iMax48 = run("iMax48", 140737488355327n);
s.iMin48 = run("iMin48", 140737488355328n);
s.w48 = runpin("w48", [0n, 3683447n, 1n, [0n, [0n, s.mod, 1n], 281474976710656n]]);
s.i48 = runpin("i48", [0n, 3683433n, 1n, [0n, [0n, s.mod, 1n], 281474976710656n]]);
s.inc48 = runpin("inc48", [0n, 241397100137n, 1n, [0n, s.w48, [0n, 3n, 1n]]]);
s.dec48 = runpin("dec48", [0n, 241397097828n, 1n, [0n, [2n, 281474976710655n, [0n, 0n, 1n, 1n]], 1n]]);
s.add48 = runpin("add48", [0n, 241397163105n, 2n, [0n, s.w48, [0n, [0n, s.add, [0n, s.w48, 1n]], [0n, s.w48, 2n]]]]);
s.mul48 = runpin("mul48", [0n, 241397691757n, 2n, [0n, s.w48, [0n, [0n, s.mul, [0n, s.w48, 1n]], [0n, s.w48, 2n]]]]);
s.div48 = runpin("div48", [0n, 241398344036n, 2n, [0n, [0n, s.div, [0n, s.w48, 1n]], [0n, s.w48, 2n]]]);
s.not48 = runpin("not48", [0n, 241398214510n, 1n, [0n, s.not, [0n, s.w48, 1n]]]);
s.lth48 = runpin("lth48", [0n, 241397429356n, 2n, [0n, [0n, s.lth, [0n, s.w48, 1n]], [0n, s.w48, 2n]]]);
s.gth48 = runpin("gth48", [0n, 241397429351n, 2n, [0n, [0n, s.gth, [0n, s.w48, 1n]], [0n, s.w48, 2n]]]);
s.lte48 = runpin("lte48", [0n, 241397232748n, 2n, [0n, [0n, s.lte, [0n, s.w48, 1n]], [0n, s.w48, 2n]]]);
s.gte48 = runpin("gte48", [0n, 241397232743n, 2n, [0n, [0n, s.gte, [0n, s.w48, 1n]], [0n, s.w48, 2n]]]);
s.eql48 = runpin("eql48", [0n, 241397690725n, 2n, [0n, [0n, s.aeq, [0n, s.w48, 1n]], [0n, s.w48, 2n]]]);
s.isZero48 = run("isZero48", s.not48);
s.sub48 = runpin("sub48", [0n, 241397036403n, 2n, [0n, [0n, [0n, s.__if, [0n, [0n, s.lte48, 2n], 1n]], [0n, [0n, s.sub, [0n, s.w48, 1n]], [0n, s.w48, 2n]]], [0n, [0n, s.sub, [0n, [s.add, 281474976710656n], 1n]], 2n]]]);
s.bitFlip48 = runpin("bitFlip48", [0n, 1036796304128858155362n, 1n, [0n, [s.sub48, 281474976710655n], 1n]]);
s.iNeg48 = runpin("iNeg48", [0n, 61797724147305n, 1n, [0n, s.inc48, [0n, s.bitFlip48, 1n]]]);
s.iIsZero48 = runpin("iIsZero48", [0n, 1036796032519756794217n, 1n, [0n, s.not48, 1n]]);
s.iInc48 = runpin("iInc48", [0n, 61797657626985n, 1n, [0n, s.inc48, 1n]]);
s.iAdd48 = runpin("iAdd48", [0n, 61797673746793n, 2n, [0n, [0n, s.add48, 1n], 2n]]);
s.iSub48 = runpin("iSub48", [0n, 61797641311081n, 2n, [0n, [0n, s.add48, 1n], [0n, s.iNeg48, 2n]]]);
s.iMul48 = runpin("iMul48", [0n, 61797809081705n, 2n, [0n, [0n, s.mul48, 1n], 2n]]);
s.iDec48 = runpin("iDec48", [0n, 61797657035881n, 1n, [0n, s.dec48, 1n]]);
s.iEql48 = runpin("iEql48", [0n, 61797808817513n, 2n, [0n, [0n, s.eql48, 1n], 2n]]);
s.iIsNeg48 = runpin("iIsNeg48", [0n, 4049975649718454633n, 1n, [0n, [0n, s.gth48, 1n], 140737488355327n]]);
s.iAbs48 = runpin("iAbs48", [0n, 61797925273961n, 1n, [0n, [0n, [0n, s.__if, [0n, s.iIsNeg48, 1n]], [0n, s.iNeg48, 1n]], 1n]]);
s.iDiv48 = runpin("iDiv48", [0n, 61797976065129n, 2n, [1n, [0n, [0n, s.div48, [0n, s.iAbs48, 1n]], [0n, s.iAbs48, 2n]], [0n, [0n, [0n, s.__if, [0n, [0n, s.xor, [0n, s.iIsNeg48, 1n]], [0n, s.iIsNeg48, 2n]]], [0n, s.iNeg48, 3n]], 3n]]]);
s.iGth48 = runpin("iGth48", [0n, 61797741905769n, 2n, [0n, [0n, [0n, s.__if, [0n, s.iIsNeg48, 1n]], [0n, [0n, s.and, [0n, s.iIsNeg48, 2n]], [0n, [0n, s.gth48, [0n, s.iNeg48, 2n]], [0n, s.iNeg48, 1n]]]], [0n, [0n, s.or, [0n, s.iIsNeg48, 2n]], [0n, [0n, s.gth48, 1n], 2n]]]]);
s.iGte48 = runpin("iGte48", [0n, 61797691574121n, 2n, [0n, [0n, s.or, [0n, [0n, s.eql48, 1n], 2n]], [0n, [0n, s.iGth48, 1n], 2n]]]);
s.iLte48 = runpin("iLte48", [0n, 61797691575401n, 2n, [0n, [0n, s.iGte48, 2n], 1n]]);
s.iLth48 = runpin("iLth48", [0n, 61797741907049n, 2n, [0n, [0n, s.iGth48, 2n], 1n]]);
s.okaySymbolChar = runpin("okaySymbolChar", [0n, 2319912094531295664344353539713903n, 1n, [0n, [0n, s.or, [0n, [s.eql, 95n], 1n]], [0n, [0n, s.or, [0n, s.isAlpha, 1n]], [0n, s.isDigit, 1n]]]]);
s.okaySymbol = runpin("okaySymbol", [0n, 512070261200491047381871n, 1n, [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 1n]], [2n, 0n]], [1n, [0n, s.cordToRow, 1n], [0n, [0n, s.and, [0n, s.not, [0n, s.isDigit, [0n, [s.idx, 0n], 2n]]]], [0n, [s.all, s.okaySymbolChar], 2n]]]]]);
s.readSymbol = runpin("readSymbol", [0n, 512070261200490695058802n, 1n, [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 11740429177913567546618662371055056656179262738105091696941216574246333249319520n], 1n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], [1n, [0n, [s.idx, 1n], 1n], [0n, [0n, [0n, s.ifNot, [0n, s.okaySymbol, 3n]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 44607611010848201136568426267717454290258964491724294649500036681n], 1n]]], [0n, s.RIGHT, 3n]]]], 2n]]]]);
s.readRowOfNames = runpin("readRowOfNames", [0n, 2340513000335989705809604372424050n, 2n, [1n, [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, s.cordWeld, 1n], 418377346866024820505133833246721349489247282775627099810715231214939290859298687284231828041327080796556525281904521248n]], 2n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 2n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 3n], 3n], 3n], [1n, [0n, s.readSymbol, 2n], [0n, [0n, [0n, s.__if, [0n, s.car, 4n]], [0n, [s.idx, 0n], [0n, s.cdr, 4n]]], 4n]]], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, [s.idx, 1n], 2n]], 44n]], 3n], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, [s.idx, 3n], 2n]], [2n, 0n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 13247970192364794533078997310140780825122054390594843940057209400560003891159406n], 2n]]], [0n, [s.eitherRowTraverse, s.readSymbol], [0n, [s.idx, 2n], 2n]]]]]]]]);
s.isOpenRowExp = runpin("isOpenRowExp", [0n, 34807720244815861243351888745n, 1n, [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [2n, 0n]], [2n, 0n]], [2n, 0n]], [2n, 0n]], [1n, [0n, [s.idx, 2n], 1n], [0n, [0n, s.and, [0n, [0n, s.gte, [0n, s.len, 2n]], [2n, 1n]]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], [0n, [s.idx, 0n], 2n]]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [2n, 0n]], [2n, 0n]], [2n, 0n]], [2n, 0n]], [0n, [0n, s.eql, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 2n]]], 44n]]]]]]]]);
s.openRowE = runpin("openRowE", [0n, 5005591910675738735n, 3n, [0n, [s.NODE, 35n], [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], 3n], 2n], [0n, [s.NODE, 44n], [0n, [s.map, s.varE], 1n]]], [[0n, 0n, 3n, 0n], 33617922058711151n, 1n]]]]);
//s.WEIRD = runpin("WEIRD", [0n, 8606188047030054691n, 4n, [0n, [0n, [0n, [0n, [s.gensymMacro, 8606188047030054691n, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, [s.readRowOfNames, 15127213844390767099548817510650467085897n]], [0n, 0n, 4n, [1n, [0n, s.gensymE, 1n], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, [0n, s.letE, 5n], 3n], [0n, [0n, [0n, [0n, 2129765612212836002146n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], 1n], [1n, [0n, [s.idx, 0n], 3n], [0n, [0n, [0n, s.letE, [0n, s.WORD, [0n, [s.idx, 1n], 4n]]], [0n, s.appE, [0n, [0n, [0n, [0n, 0n, 4n, 0n], 2n], [0n, s.natE, [0n, [s.idx, 0n], 4n]]], [0n, s.cnsE, s.idx]]]], [0n, [0n, [0n, 0n, 1n], 2n], [0n, [s.idx, 1n], 3n]]]]]], 4n], 5n], [0n, [0n, s.listZip, [0n, s.listEnumFrom, [2n, 0n]]], [0n, s.listFromRow, 2n]]]]], [2n, 1n]]]]]], 1n], 2n], 3n], 4n]]);
s.readSpecificRuneFolded = runpin("readSpecificRuneFolded", [0n, 37562626898292518055682277670828658562040847120033138n, 3n, [1n, [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cordCat, [0n, [0n, [[0n, 0n, 4n, 0n], 111482040623143n], 1n], 12109059676339090874841462853n]]], 2n]], [1n, [0n, [0n, 0n, 2n, 1n], 4n], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 2n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 4n], 4n], 4n], 4n], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, 1n], [0n, [s.idx, 1n], 2n]]], 4n], [0n, 3n, [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 2n]], [0n, [s.idx, 3n], 2n]]]]]]]]]);
//s.WEIRD = run("WEIRD", [0n, 8606188047030054691n, 4n, [0n, [0n, [0n, [0n, [s.gensymMacro, 8606188047030054691n, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, [s.readRowOfNames, 15127213844390767099548817510650467085897n]], [0n, 0n, 4n, [1n, [0n, s.gensymE, 1n], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, [0n, s.letE, 5n], 3n], [0n, [0n, [0n, [0n, 2129765612212836002146n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], 1n], [1n, [0n, [s.idx, 0n], 3n], [0n, [0n, [0n, s.letE, [0n, s.WORD, [0n, [s.idx, 1n], 4n]]], [0n, s.appE, [0n, [0n, [0n, [0n, 0n, 4n, 0n], 2n], [0n, s.natE, [0n, [s.idx, 0n], 4n]]], [0n, s.cnsE, s.idx]]]], [0n, [0n, [0n, 0n, 1n], 2n], [0n, [s.idx, 1n], 3n]]]]]], 4n], 5n], [0n, [0n, s.listZip, [0n, s.listEnumFrom, [2n, 0n]]], [0n, s.listFromRow, 2n]]]]], [2n, 1n]]]]]], 1n], 2n], 3n], 4n]]);
s.readTabPatternBinder = runpin("readTabPatternBinder", [0n, 653086071938536707306314317540597847452150752626n, 1n, [1n, [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cordCat, [[0n, 0n, 4n, 0n], 111482040623143n, 61n, 12109059676339090874841462853n]]], 1n]], [1n, [0n, [0n, 0n, 2n, 1n], 2n], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], 2n], [0n, [0n, [0n, s.__if, [0n, [s.neq, 61n], [0n, [s.idx, 1n], 1n]]], 2n], [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 68603902109597519489353254628459762979239477189251060961350416318371882802273164100807922983054238036n], 1n]], [0n, [0n, [0n, s.__switch, [0n, s.len, [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]]]], 4n], [0n, [0n, [0n, [0n, 0n, 4n, 0n], [0n, [0n, [0n, s.rexGetWord, [0n, [s.idx, 0n], [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]]]], [0n, s.LEFT, 14056715671998095712450634992522590019893702434217101482800849684116034487875653n]], [0n, [0n, 0n, 2n, [0n, [0n, [0n, s.rexGetWord, 1n], [0n, s.LEFT, 769924340671464103561189371913753705246924560459887062907137231659912026585721501765n]], [0n, [0n, 0n, 2n, [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]]], 2n]]], [0n, [s.idx, 1n], [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]]]]]], [1n, [0n, s.LEFT, 14056715671998095712450634992522590019893702434217101482800849684116034487875653n], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], [0n, [s.idx, 0n], [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]]]]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 5n], 5n], 5n], [1n, [0n, [s.idx, 1n], [0n, [s.idx, 0n], [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]]]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], 6n], 6n]]]], 5n]]]], 4n]]]]]]]]]);
s.readTabPattern = runpin("readTabPattern", [0n, 2240128465699286550755901633029490n, 1n, [1n, [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cordCat, [[0n, 0n, 4n, 0n], 111482040623143n, 37n, 12109059676339090874841462853n]]], 1n]], [1n, [0n, [0n, 0n, 2n, 1n], 2n], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], 2n], [0n, [0n, [0n, s.__if, [0n, [s.neq, 37n], [0n, [s.idx, 1n], 1n]]], 2n], [0n, [0n, [0n, s.__if, [0n, [s.neq, 1n], [0n, s.len, [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]]]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 1049471090005929184462495971392380239789562427497976390734544532473119067690716650267344267472197098869514580n], 1n]]], [1n, [0n, [s.idx, 0n], [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]]], [1n, [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cordCat, [[0n, 0n, 4n, 0n], 111482040623143n, 44n, 12109059676339090874841462853n]]], 4n]], [1n, [0n, [0n, 0n, 2n, 1n], 5n], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 4n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 5n], 5n], 5n], 5n], [0n, [0n, [0n, s.__if, [0n, [s.neq, 44n], [0n, [s.idx, 1n], 4n]]], 5n], [0n, [s.eitherMap, s.tabFromPairs], [0n, [s.eitherRowTraverse, s.readTabPatternBinder], [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 4n]], [0n, [s.idx, 3n], 4n]]]]]]]]]]]]]]]]]);
s.fromEither = runpin("fromEither", [0n, 540220426955208371696230n, 3n, [0n, [0n, [0n, s.__if, [0n, s.car, 3n]], [0n, 2n, [0n, s.cdr, 3n]]], [0n, 1n, [0n, s.cdr, 3n]]]]);
s.readNodeMerged = runpin("readNodeMerged", [0n, 2036275020031049495251865422620018n, 3n, [1n, [0n, [0n, 0n, 2n, 1n], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [1n, [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, s.len, 2n]], [0n, s.len, 5n]]], [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cordCat, [0n, [0n, [[0n, 0n, 4n, 0n], 495605869344n], [0n, s.showNat, [0n, s.len, 2n]]], 153023698109607709800517n]]], 1n]]], [1n, [0n, s.eitherRowSequence, [0n, [0n, [s.zipWith, s.apply], 2n], 5n]], [0n, [0n, [0n, s.__if, [0n, s.car, 6n]], [0n, [0n, s.rowApply, 3n], [0n, s.cdr, 6n]]], 6n]]]]]]]]);
s.openTabE = runpin("openTabE", [0n, 4999665551591960687n, 4n, [0n, [0n, [0n, s.letE, 2n], 3n], [0n, [0n, [0n, [0n, 28519n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], 2n], [0n, [0n, [0n, s.letE, [0n, s.WORD, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 3n]]]], [0n, s.appE, [0n, [0n, [0n, [0n, 0n, 4n, 0n], 1n], [0n, s.cnsE, [0n, [s.idx, 0n], [0n, [s.idx, 0n], 3n]]]], [0n, s.cnsE, s.tabIdx]]]], [0n, [0n, [0n, 0n, 1n], 2n], [0n, [s.idx, 1n], 3n]]]]], 2n], 4n], [0n, s.tabToList, 1n]]]]);
s.isOpenTabExp = runpin("isOpenTabExp", [0n, 34807719856425992328873735017n, 1n, [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [2n, 0n]], [2n, 0n]], [2n, 0n]], [2n, 0n]], [1n, [0n, [s.idx, 2n], 1n], [0n, [0n, s.and, [0n, [0n, s.gte, [0n, s.len, 2n]], [2n, 1n]]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], [0n, [s.idx, 0n], 2n]]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [2n, 0n]], [2n, 0n]], [2n, 0n]], [2n, 0n]], [0n, [0n, s.eql, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 2n]]], 37n]]]]]]]]);
s.readOpenTabExp = runpin("readOpenTabExp", [0n, 2281158728510733833265068845917554n, 2n, [1n, [0n, [0n, 0n, 2n, 1n], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], 1n]]], [1n, [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], 1n]], [0n, [s.idx, 3n], 1n]], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, s.len, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, s.readTabPattern]]], [0n, s.len, 4n]]], [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cordCat, [0n, [0n, [[0n, 0n, 4n, 0n], 495605869344n], [0n, s.showNat, [0n, s.len, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, s.readTabPattern]]]], 153023698109607709800517n]]], 1n]]], [1n, [0n, s.eitherRowSequence, [0n, [s.zipWith, s.apply, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, s.readTabPattern]], 4n]], [0n, [0n, [0n, s.__if, [0n, s.car, 5n]], [0n, [0n, s.rowApply, 2n], [0n, s.cdr, 5n]]], 5n]]]]]]]]);
//s.WEIRD = runpin("WEIRD", [0n, 7089040121582874403n, 4n, [1n, [0n, [0n, 0n, 2n, 1n], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [1n, [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]], [0n, [s.idx, 3n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, s.len, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, s.readTabPattern]]], [0n, s.len, 6n]]], [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cordCat, [0n, [0n, [[0n, 0n, 4n, 0n], 495605869344n], [0n, s.showNat, [0n, s.len, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, s.readTabPattern]]]], 153023698109607709800517n]]], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [1n, [0n, s.eitherRowSequence, [0n, [s.zipWith, s.apply, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, s.readTabPattern]], 6n]], [0n, [0n, [0n, s.__if, [0n, s.car, 7n]], [0n, [0n, s.rowApply, [0n, [0n, 0n, 4n, [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, [0n, [0n, s.openTabE, 2n], [0n, s.gensymE, 1n]], 3n], 4n]], [2n, 1n]]]], 2n]], [0n, s.cdr, 7n]]], 7n]]]]]]]]);
//s.WEIRD = runpin("WEIRD", [0n, 42n, 4n, [1n, [0n, [0n, [s.HEIR, 42n], 3n], 4n], [0n, [0n, [0n, s.__if, [0n, s.isOpenTabExp, 5n]], [0n, [0n, [0n, [0n, [0n, 7089040121582874403n, 4n, [1n, [0n, [0n, 0n, 2n, 1n], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 526459052080917214520038492059236421n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [1n, [0n, [0n, s.mergeHeir, [0n, [s.idx, 2n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]], [0n, [s.idx, 3n], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, s.len, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, s.readTabPattern]]], [0n, s.len, 6n]]], [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.cordCat, [0n, [0n, [[0n, 0n, 4n, 0n], 495605869344n], [0n, s.showNat, [0n, s.len, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, s.readTabPattern]]]], 153023698109607709800517n]]], [0n, [0n, [s.HEIR, 42n], 3n], 4n]]]], [1n, [0n, s.eitherRowSequence, [0n, [s.zipWith, s.apply, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, s.readTabPattern]], 6n]], [0n, [0n, [0n, s.__if, [0n, s.car, 7n]], [0n, [0n, s.rowApply, [0n, [0n, 0n, 4n, [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, [0n, [0n, s.openTabE, 2n], [0n, s.gensymE, 1n]], 3n], 4n]], [2n, 1n]]]], 2n]], [0n, s.cdr, 7n]]], 7n]]]]]]]], 1n], 2n], 3n], 4n]], [0n, [0n, [0n, s.__if, [0n, s.isOpenRowExp, 5n]], [0n, [0n, [0n, [0n, [0n, 8606188047030054691n, 4n, [0n, [0n, [0n, [0n, [s.gensymMacro, 8606188047030054691n, [[0n, 0n, 4n, 0n], s.RIGHT, s.RIGHT, [s.readRowOfNames, 15127213844390767099548817510650467085897n]], [0n, 0n, 4n, [1n, [0n, s.gensymE, 1n], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, [0n, s.letE, 5n], 3n], [0n, [0n, [0n, [0n, 2129765612212836002146n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], 1n], [1n, [0n, [s.idx, 0n], 3n], [0n, [0n, [0n, s.letE, [0n, s.WORD, [0n, [s.idx, 1n], 4n]]], [0n, s.appE, [0n, [0n, [0n, [0n, 0n, 4n, 0n], 2n], [0n, s.natE, [0n, [s.idx, 0n], 4n]]], [0n, s.cnsE, s.idx]]]], [0n, [0n, [0n, 0n, 1n], 2n], [0n, [s.idx, 1n], 3n]]]]]], 4n], 5n], [0n, [0n, s.listZip, [0n, s.listEnumFrom, [2n, 0n]]], [0n, s.listFromRow, 2n]]]]], [2n, 1n]]]]]], 1n], 2n], 3n], 4n]], 1n], 2n], 3n], 4n]], [0n, [0n, [0n, s.__if, [0n, s.isWord, [0n, [s.idx, 0n], 3n]]], [1n, [0n, [0n, s.weld, 3n], [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 4n]], [0n, 0n, 1n, 0n]], [0n, [0n, 0n, 2n, 0n], 4n]]], [0n, [0n, [0n, s.__if, [0n, [s.neq, 3n], [0n, s.len, 6n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 724671688863098125721355132963383144537728158911998874122309n], 5n]]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [s.NODE, 64n], 6n]], [2n, 0n]]]]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 11631411995164860801442273440915500901205465791090584230198672256597n], 5n]]]]]]]);
s.gulf = runpin("gulf", [0n, 1718383975n, 2n, [0n, [0n, s.gen, [0n, [0n, s.sub, [0n, 3n, 2n]], 1n]], [0n, s.add, 1n]]]);
s.b3OutLen = run("b3OutLen", 32n);
s.b3KeyLen = run("b3KeyLen", 32n);
s.b3BlockLen = run("b3BlockLen", 64n);
s.b3ChunkLen = run("b3ChunkLen", 1024n);
s.b3ChunkStart = run("b3ChunkStart", 1n);
s.b3ChunkEnd = run("b3ChunkEnd", 2n);
s.b3Parent = run("b3Parent", 4n);
s.b3Root = run("b3Root", 8n);
s.b3KeyedHash = run("b3KeyedHash", 16n);
s.b3DeriveKeyContext = run("b3DeriveKeyContext", 32n);
s.b3DeriveKeyMaterial = run("b3DeriveKeyMaterial", 64n);
s.b3Iv = run("b3Iv", [[0n, 0n, 9n, 0n], 1541459225n, 528734635n, 2600822924n, 1359893119n, 2773480762n, 1013904242n, 3144134277n, 1779033703n]);
s.b3MsgPermutation = run("b3MsgPermutation", [[0n, 0n, 17n, 0n], 8n, 15n, 14n, 9n, 5n, 12n, 11n, 1n, 13n, 4n, 0n, 7n, 10n, 3n, 6n, 2n]);
s.b3G = runpin("b3G", [0n, 4666210n, 7n, [1n, [0n, [0n, [0n, s.put, 1n], 2n], [0n, [0n, s.add32, [0n, [0n, s.add32, [0n, [0n, s.get, 1n], 2n]], [0n, [0n, s.get, 1n], 3n]]], 6n]], [1n, [0n, [0n, [0n, s.put, 8n], 5n], [0n, [0n, s.ror32, [0n, [0n, s.xor32, [0n, [0n, s.get, 8n], 5n]], [0n, [0n, s.get, 8n], 2n]]], 16n]], [1n, [0n, [0n, [0n, s.put, 9n], 4n], [0n, [0n, s.add32, [0n, [0n, s.get, 9n], 4n]], [0n, [0n, s.get, 9n], 5n]]], [1n, [0n, [0n, [0n, s.put, 10n], 3n], [0n, [0n, s.ror32, [0n, [0n, s.xor32, [0n, [0n, s.get, 10n], 3n]], [0n, [0n, s.get, 10n], 4n]]], 12n]], [1n, [0n, [0n, [0n, s.put, 11n], 2n], [0n, [0n, s.add32, [0n, [0n, s.add32, [0n, [0n, s.get, 11n], 2n]], [0n, [0n, s.get, 11n], 3n]]], 7n]], [1n, [0n, [0n, [0n, s.put, 12n], 5n], [0n, [0n, s.ror32, [0n, [0n, s.xor32, [0n, [0n, s.get, 12n], 5n]], [0n, [0n, s.get, 12n], 2n]]], [2n, 8n]]], [1n, [0n, [0n, [0n, s.put, 13n], 4n], [0n, [0n, s.add32, [0n, [0n, s.get, 13n], 4n]], [0n, [0n, s.get, 13n], 5n]]], [0n, [0n, [0n, s.put, 14n], 3n], [0n, [0n, s.ror32, [0n, [0n, s.xor32, [0n, [0n, s.get, 14n], 3n]], [0n, [0n, s.get, 14n], 4n]]], [2n, 7n]]]]]]]]]]]);
s.b3Round = runpin("b3Round", [0n, 28268948328952674n, 2n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, s.b3G, [0n, [0n, [0n, [0n, [0n, [0n, [0n, s.b3G, [0n, [0n, [0n, [0n, [0n, [0n, [0n, s.b3G, [0n, [0n, [0n, [0n, [0n, [0n, [0n, s.b3G, [0n, [0n, [0n, [0n, [0n, [0n, [0n, s.b3G, [0n, [0n, [0n, [0n, [0n, [0n, [0n, s.b3G, [0n, [0n, [0n, [0n, [0n, [0n, [0n, s.b3G, [0n, [0n, [0n, [0n, [0n, [0n, [0n, s.b3G, 1n], [2n, 0n]], 4n], 8n], 12n], [0n, [0n, s.get, 2n], [2n, 0n]]], [0n, [0n, s.get, 2n], [2n, 1n]]]], [2n, 1n]], 5n], 9n], 13n], [0n, [0n, s.get, 2n], [2n, 2n]]], [0n, [0n, s.get, 2n], 3n]]], [2n, 2n]], 6n], 10n], 14n], [0n, [0n, s.get, 2n], 4n]], [0n, [0n, s.get, 2n], 5n]]], 3n], 7n], 11n], 15n], [0n, [0n, s.get, 2n], 6n]], [0n, [0n, s.get, 2n], 7n]]], [2n, 0n]], 5n], 10n], 15n], [0n, [0n, s.get, 2n], 8n]], [0n, [0n, s.get, 2n], 9n]]], [2n, 1n]], 6n], 11n], 12n], [0n, [0n, s.get, 2n], 10n]], [0n, [0n, s.get, 2n], 11n]]], [2n, 2n]], 7n], 8n], 13n], [0n, [0n, s.get, 2n], 12n]], [0n, [0n, s.get, 2n], 13n]]], 3n], 4n], 9n], 14n], [0n, [0n, s.get, 2n], 14n]], [0n, [0n, s.get, 2n], 15n]]]);
s.b3Permute = runpin("b3Permute", [0n, 1871512885263432954722n, 1n, [0n, [s.gen, 16n], [0n, [0n, 0n, 2n, [0n, [0n, s.get, 1n], [0n, [s.get, [[0n, 0n, 17n, 0n], 8n, 15n, 14n, 9n, 5n, 12n, 11n, 1n, 13n, 4n, 0n, 7n, 10n, 3n, 6n, 2n]], 2n]]], 1n]]]);
s.u8weld = runpin("u8weld", [0n, 110416721557621n, 2n, [0n, [0n, s.add, 1n], [0n, [0n, s.lsh, 2n], 8n]]]);
s.u32weld = runpin("u32weld", [0n, 28266680718340981n, 1n, [0n, [0n, [0n, s.__if, [0n, s.not, [0n, [0n, s.aeq, [0n, s.len, 1n]], 4n]]], [0n, s.die, 2829509251449470978598439083202322081364153466447268557685n]], [0n, [0n, s.u8weld, [0n, [0n, s.get, 1n], [2n, 0n]]], [0n, [0n, s.u8weld, [0n, [0n, s.get, 1n], [2n, 1n]]], [0n, [0n, s.u8weld, [0n, [0n, s.get, 1n], 2n]], [0n, [0n, s.get, 1n], 3n]]]]]]);
s.bytesToWords = runpin("bytesToWords", [0n, 35712209115084132400449747298n, 1n, [0n, [0n, [0n, s.__if, [0n, [0n, s.mod, [0n, s.len, 1n]], 4n]], [0n, s.die, 395565048585450816764460351897957297286060574463492751724217454656120467855341025634n]], [1n, [0n, [0n, s.div, [0n, s.len, 1n]], 4n], [0n, [0n, [0n, [0n, [0n, [0n, 1886351212n, 5n, [0n, [0n, [0n, s.__if, [0n, [0n, s.eql, 4n], 2n]], 5n], [1n, [0n, [0n, s.add, 3n], [2n, 4n]], [0n, [0n, [0n, [0n, [0n, 0n, 1n], 2n], 6n], [0n, [2n, 3n], 4n]], [0n, 5n, [0n, s.u32weld, [0n, [0n, [0n, s.slice, 1n], 3n], 6n]]]]]]], 1n], 2n], [2n, 0n]], [2n, 0n]], [0n, s.mkRow, 2n]]]]]);
s.wordToBytes = runpin("wordToBytes", [0n, 139505576830433374871121783n, 1n, [0n, [0n, [[0n, 28519n, 3n, [0n, [0n, [0n, s.__if, [0n, [0n, s.eql, 1n], 4n]], 3n], [0n, [0n, [0n, 0n, [0n, [2n, 3n], 1n]], [0n, [0n, s.rsh, 2n], 8n]], [0n, 3n, [0n, [s.dis, 255n], 2n]]]]], 0n], 1n], [0n, s.mkRow, 4n]]]);
s.wordsToBytes = runpin("wordsToBytes", [0n, 35713427668590944031196999543n, 1n, [0n, [s.catMap, s.wordToBytes], 1n]]);
s.b3Compress = runpin("b3Compress", [0n, 545200831127246294168418n, 1n, [1n, [0n, [s.idx, 0n], 1n], [1n, [0n, [s.idx, 2n], 1n], [1n, [0n, s.b3Permute, [0n, [s.idx, 1n], 1n]], [1n, [0n, s.b3Permute, 4n], [1n, [0n, s.b3Permute, 5n], [1n, [0n, s.b3Permute, 6n], [1n, [0n, s.b3Permute, 7n], [0n, [0n, [0n, [0n, 1886351212n, 3n, [0n, [0n, [0n, s.__if, [0n, [0n, s.eql, 2n], 8n]], 3n], [1n, [0n, [0n, [0n, s.put, 3n], 2n], [0n, [0n, s.xor32, [0n, [0n, s.get, 3n], [0n, [0n, s.add, 2n], 8n]]], [0n, [0n, s.get, 3n], 2n]]], [0n, [0n, [0n, 0n, 1n], [0n, [2n, 3n], 2n]], [0n, [0n, [0n, s.put, 4n], [0n, [0n, s.add, 2n], 8n]], [0n, [0n, s.xor32, [0n, [0n, s.get, 4n], [0n, [0n, s.add, 2n], 8n]]], [0n, [0n, s.get, 1n], 2n]]]]]]], 2n], [2n, 0n]], [0n, [0n, s.b3Round, [0n, [0n, s.b3Round, [0n, [0n, s.b3Round, [0n, [0n, s.b3Round, [0n, [0n, s.b3Round, [0n, [0n, s.b3Round, [0n, [0n, s.b3Round, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, 0n, 17n, 0n], [0n, [s.idx, 4n], 1n]], [0n, [s.idx, 3n], 1n]], [0n, s.chop32, [0n, [0n, s.rsh, 3n], 32n]]], [0n, s.chop32, 3n]], [0n, [s.get, [[0n, 0n, 9n, 0n], 1541459225n, 528734635n, 2600822924n, 1359893119n, 2773480762n, 1013904242n, 3144134277n, 1779033703n]], [2n, 3n]]], [0n, [s.get, [[0n, 0n, 9n, 0n], 1541459225n, 528734635n, 2600822924n, 1359893119n, 2773480762n, 1013904242n, 3144134277n, 1779033703n]], [2n, 2n]]], [0n, [s.get, [[0n, 0n, 9n, 0n], 1541459225n, 528734635n, 2600822924n, 1359893119n, 2773480762n, 1013904242n, 3144134277n, 1779033703n]], [2n, 1n]]], [0n, [s.get, [[0n, 0n, 9n, 0n], 1541459225n, 528734635n, 2600822924n, 1359893119n, 2773480762n, 1013904242n, 3144134277n, 1779033703n]], [2n, 0n]]], [0n, [0n, s.get, 2n], [2n, 7n]]], [0n, [0n, s.get, 2n], [2n, 6n]]], [0n, [0n, s.get, 2n], [2n, 5n]]], [0n, [0n, s.get, 2n], [2n, 4n]]], [0n, [0n, s.get, 2n], [2n, 3n]]], [0n, [0n, s.get, 2n], [2n, 2n]]], [0n, [0n, s.get, 2n], [2n, 1n]]], [0n, [0n, s.get, 2n], [2n, 0n]]]], [0n, [s.idx, 1n], 1n]]], 4n]], 5n]], 6n]], 7n]], 8n]], [0n, s.b3Permute, 8n]]]]]]]]]]]);
s.first8words = runpin("first8words", [0n, 139500816864744255744272742n, 1n, [0n, [0n, [0n, s.slice, 1n], [2n, 0n]], 8n]]);
s.b3OutputNew = runpin("b3OutputNew", [0n, 144340578786685581463073634n, 5n, [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 5n], 4n], 3n], 2n], 1n]]);
s.b3OutputGetInputChainingValue = runpin("b3OutputGetInputChainingValue", [0n, 2735320736545840653038195636127499782758806548861854484775096411960162n, 1n, [0n, [0n, s.get, 1n], [2n, 0n]]]);
s.b3OutputGetBlockWords = runpin("b3OutputGetBlockWords", [0n, 168646139354299900077256884546134169656434390676322n, 1n, [0n, [0n, s.get, 1n], [2n, 1n]]]);
s.b3OutputGetCounter = runpin("b3OutputGetCounter", [0n, 9965323879261705517472880370440415118046050n, 1n, [0n, [0n, s.get, 1n], 2n]]);
s.b3OutputGetBlockLen = runpin("b3OutputGetBlockLen", [0n, 2461906316921055184458688772618040926954009442n, 1n, [0n, [0n, s.get, 1n], 3n]]);
s.b3OutputGetFlags = runpin("b3OutputGetFlags", [0n, 153398002063872182741950824028977443682n, 1n, [0n, [0n, s.get, 1n], 4n]]);
s.b3OutputChainingValue = runpin("b3OutputChainingValue", [0n, 148282034250382527980772369486137746508229412598626n, 1n, [0n, s.first8words, [0n, s.b3Compress, 1n]]]);
s.b3OutputRootOutputBytes = runpin("b3OutputRootOutputBytes", [0n, 11052770512768211820513044158565216017983794050424058722n, 2n, [1n, [0n, [s.mul, 2n], 32n], [1n, [0n, [0n, s.div, [0n, [0n, s.roundUp, 2n], 3n]], 3n], [0n, s.cat, [0n, [0n, [0n, [0n, [0n, [0n, [0n, 1886351212n, 6n, [0n, [0n, [0n, s.__if, [0n, [0n, s.eql, 4n], 3n]], 6n], [1n, [0n, [0n, s.min, 2n], 5n], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 1n], 2n], 3n], [0n, [2n, 3n], 4n]], [0n, [0n, s.sub, 5n], 7n]], [0n, 6n, [0n, [0n, s.take, 7n], [0n, s.wordsToBytes, [0n, s.b3Compress, [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, [0n, s.or32, [0n, s.b3OutputGetFlags, 1n]], 8n]], [0n, s.b3OutputGetBlockLen, 1n]], 4n], [0n, s.b3OutputGetBlockWords, 1n]], [0n, s.b3OutputGetInputChainingValue, 1n]]]]]]]]]], 1n], 3n], 4n], [2n, 0n]], 2n], [0n, s.mkRow, 4n]]]]]]);
s.b3ChunkstGetChainingVal = runpin("b3ChunkstGetChainingVal", [0n, 10380763189132076960686384590240249481066648137418093410n, 1n, [0n, [0n, s.get, 1n], [2n, 0n]]]);
s.b3ChunkstGetChunkCounter = runpin("b3ChunkstGetChunkCounter", [0n, 2804989306829332661940013527125801121151442789523083440994n, 1n, [0n, [0n, s.get, 1n], [2n, 1n]]]);
s.b3ChunkstGetBlock = runpin("b3ChunkstGetBlock", [0n, 36542385372839738248270395411137783083874n, 1n, [0n, [0n, s.get, 1n], 2n]]);
s.b3ChunkstGetBlockLen = runpin("b3ChunkstGetBlockLen", [0n, 630248017131790127221424325790072948140617708386n, 1n, [0n, [0n, s.get, 1n], 3n]]);
s.b3ChunkstGetBlocksCompressed = runpin("b3ChunkstGetBlocksCompressed", [0n, 10572963679157342364587962960867815337626232000358756289778225984354n, 1n, [0n, [0n, s.get, 1n], 4n]]);
s.b3ChunkstGetFlags = runpin("b3ChunkstGetFlags", [0n, 39269888528351278781939265422258616873826n, 1n, [0n, [0n, s.get, 1n], 5n]]);
s.b3ChunkstPutChainingVal = runpin("b3ChunkstPutChainingVal", [0n, 10380763189132076960686384590259634795478828031020315490n, 1n, [0n, [0n, s.put, 1n], [2n, 0n]]]);
s.b3ChunkstPutChunkCounter = runpin("b3ChunkstPutChunkCounter", [0n, 2804989306829332661940013527125820506465854969416685663074n, 1n, [0n, [0n, s.put, 1n], [2n, 1n]]]);
s.b3ChunkstPutBlock = runpin("b3ChunkstPutBlock", [0n, 36542385372839757633584807591031385305954n, 1n, [0n, [0n, s.put, 1n], 2n]]);
s.b3ChunkstPutBlockLen = runpin("b3ChunkstPutBlockLen", [0n, 630248017131790127221443711104485128034219930466n, 1n, [0n, [0n, s.put, 1n], 3n]]);
s.b3ChunkstPutBlocksCompressed = runpin("b3ChunkstPutBlocksCompressed", [0n, 10572963679157342364587962960867815337626251385673168469671828206434n, 1n, [0n, [0n, s.put, 1n], 4n]]);
s.b3ChunkstPutFlags = runpin("b3ChunkstPutFlags", [0n, 39269888528351298167253677602152219095906n, 1n, [0n, [0n, s.put, 1n], 5n]]);
s.b3ChunkstNew = runpin("b3ChunkstNew", [0n, 36951188169245979694938141538n, 3n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, 0n, 7n, 0n], 3n], [2n, 0n]], [2n, 0n]], [0n, [s.rep, 0n], 64n]], 2n], 1n]]);
s.b3ChunkstLen = runpin("b3ChunkstLen", [0n, 34165813636120908337124684642n, 1n, [0n, [0n, s.add, [0n, s.b3ChunkstGetBlockLen, 1n]], [0n, [s.mul, 64n], [0n, s.b3ChunkstGetBlocksCompressed, 1n]]]]);
s.b3ChunkstStartFlag = runpin("b3ChunkstStartFlag", [0n, 9005716763008782989136088800664513037939554n, 1n, [0n, [0n, [0n, s.__if, [0n, [0n, s.eql, [0n, s.b3ChunkstGetBlocksCompressed, 1n]], [2n, 0n]]], [2n, 1n]], [2n, 0n]]]);
s.b3ChunkstUpdate = runpin("b3ChunkstUpdate", [0n, 526782458442109291113068981769155426n, 2n, [0n, [0n, [0n, s.__if, [0n, [0n, s.eql, [0n, s.len, 2n]], [2n, 0n]]], 1n], [1n, [0n, [0n, [0n, s.__if, [0n, [s.neq, 64n], [0n, s.b3ChunkstGetBlockLen, 1n]]], 1n], [1n, [0n, [0n, s.b3ChunkstPutChainingVal, 1n], [0n, s.first8words, [0n, s.b3Compress, [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, [0n, s.or32, [0n, s.b3ChunkstGetFlags, 1n]], [0n, s.b3ChunkstStartFlag, 1n]]], 64n], [0n, s.b3ChunkstGetChunkCounter, 1n]], [0n, s.bytesToWords, [0n, s.b3ChunkstGetBlock, 1n]]], [0n, s.b3ChunkstGetChainingVal, 1n]]]]], [0n, [0n, s.b3ChunkstPutBlockLen, [0n, [0n, s.b3ChunkstPutBlock, [0n, [0n, s.b3ChunkstPutBlocksCompressed, 4n], [0n, [2n, 3n], [0n, s.b3ChunkstGetBlocksCompressed, 4n]]]], [0n, [s.rep, 0n], 64n]]], [2n, 0n]]]], [1n, [0n, [0n, s.min, [0n, [s.sub, 64n], [0n, s.b3ChunkstGetBlockLen, 3n]]], [0n, s.len, 2n]], [1n, [0n, [0n, s.b3ChunkstPutBlock, 3n], [0n, [0n, s.weld, [0n, [0n, s.take, 4n], 2n]], [0n, [0n, s.drop, 4n], [0n, s.b3ChunkstGetBlock, 3n]]]], [0n, [0n, 0n, [0n, [0n, s.b3ChunkstPutBlockLen, 5n], [0n, [0n, s.add, [0n, s.b3ChunkstGetBlockLen, 5n]], 4n]]], [0n, [0n, s.drop, 4n], 2n]]]]]]]);
s.b3ChunkstOutput = runpin("b3ChunkstOutput", [0n, 604688387109949523217211304716743522n, 1n, [0n, [0n, [0n, [0n, [0n, s.b3OutputNew, [0n, s.b3ChunkstGetChainingVal, 1n]], [0n, s.bytesToWords, [0n, s.b3ChunkstGetBlock, 1n]]], [0n, s.b3ChunkstGetChunkCounter, 1n]], [0n, s.b3ChunkstGetBlockLen, 1n]], [0n, [0n, s.or32, [0n, [0n, s.or32, [0n, s.b3ChunkstGetFlags, 1n]], [0n, s.b3ChunkstStartFlag, 1n]]], 2n]]]);
s.b3ParentOutput = runpin("b3ParentOutput", [0n, 2362064012148240323653276548477794n, 4n, [0n, [0n, [0n, [0n, [0n, s.b3OutputNew, 3n], [0n, [0n, s.weld, [0n, [s.take, 8n], 1n]], [0n, [s.take, 8n], 2n]]], [2n, 0n]], 64n], [0n, [s.or32, 4n], 4n]]]);
s.b3ParentCv = runpin("b3ParentCv", [0n, 558483566586254446310242n, 4n, [0n, s.b3OutputChainingValue, [0n, [0n, [0n, [0n, s.b3ParentOutput, 1n], 2n], 3n], 4n]]]);
s.b3HasherGetChunkst = runpin("b3HasherGetChunkst", [0n, 10144300441209602487874159280695239439299426n, 1n, [0n, [0n, s.get, 1n], [2n, 0n]]]);
s.b3HasherGetKeyWords = runpin("b3HasherGetKeyWords", [0n, 2573335866612526228702841913487079241985569634n, 1n, [0n, [0n, s.get, 1n], [2n, 1n]]]);
s.b3HasherGetCvStack = runpin("b3HasherGetCvStack", [0n, 9354832088138355822440409830878015432176482n, 1n, [0n, [0n, s.get, 1n], 2n]]);
s.b3HasherGetFlags = runpin("b3HasherGetFlags", [0n, 153398002063872182741802196440550224738n, 1n, [0n, [0n, s.get, 1n], 3n]]);
s.b3HasherPutChunkst = runpin("b3HasherPutChunkst", [0n, 10144300441209602487949883165117817148683106n, 2n, [0n, [0n, [0n, s.put, 1n], [2n, 0n]], 2n]]);
s.b3HasherPutCvStack = runpin("b3HasherPutCvStack", [0n, 9354832088138355822516133715300593141560162n, 2n, [0n, [0n, [0n, s.put, 1n], [2n, 2n]], 2n]]);
s.b3HasherNewInternal = runpin("b3HasherNewInternal", [0n, 2416967956295824345982634622862732387515118434n, 2n, [0n, [0n, [0n, s.__if, [0n, s.not, [0n, [s.eql, 8n], [0n, s.len, 1n]]]], [0n, s.die, 12152235045657306009692521641364037002365733396016574020250226617929n]], [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], 2n], [2n, 0n]], 1n], [0n, [0n, [0n, s.b3ChunkstNew, 1n], [2n, 0n]], 2n]]]]);
s.b3HasherNew = run("b3HasherNew", [[0n, 0n, 5n, 0n], 0n, 0n, [[0n, 0n, 9n, 0n], 1541459225n, 528734635n, 2600822924n, 1359893119n, 2773480762n, 1013904242n, 3144134277n, 1779033703n], [[0n, 0n, 7n, 0n], 0n, 0n, 0n, [[0n, 0n, 65n, 0n], 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n], 0n, [[0n, 0n, 9n, 0n], 1541459225n, 528734635n, 2600822924n, 1359893119n, 2773480762n, 1013904242n, 3144134277n, 1779033703n]]]);
s.b3HasherPushStack = runpin("b3HasherPushStack", [0n, 36542312844286177674047773251141640926050n, 2n, [0n, [0n, s.b3HasherPutCvStack, 1n], [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.b3HasherGetCvStack, 1n]], 2n]]]);
s.b3HasherPopStack = runpin("b3HasherPopStack", [0n, 142743409548002533376256871457903620962n, 1n, [1n, [0n, s.b3HasherGetCvStack, 1n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [0n, s.die, 674086692946333615842937371204104766221755432964896622998100n]], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, s.b3HasherPutCvStack, 1n], [0n, [s.idx, 1n], 2n]]], [0n, [s.idx, 0n], 2n]]]]]);
s.b3HasherAddChunkChainingValue = runpin("b3HasherAddChunkChainingValue", [0n, 2735320736545840653038195636127487783461701277660672479412875103318882n, 3n, [0n, [0n, [0n, [0n, 28519n, 3n, [0n, [0n, [0n, s.ifNot, [0n, [0n, s.and32, 3n], [2n, 1n]]], [1n, [0n, s.b3HasherPopStack, 1n], [1n, [0n, [s.idx, 1n], 4n], [0n, [0n, [0n, 0n, 5n], [0n, [0n, [0n, [0n, s.b3ParentCv, [0n, [s.idx, 0n], 4n]], 2n], [0n, s.b3HasherGetKeyWords, 5n]], [0n, s.b3HasherGetFlags, 5n]]], [0n, [0n, s.rsh, 3n], [2n, 1n]]]]]], [0n, [0n, s.b3HasherPushStack, 1n], 2n]]], 1n], 2n], 3n]]);
s.b3HasherUpdate = runpin("b3HasherUpdate", [0n, 2057743978289489270351310562538338n, 2n, [1n, [0n, [0n, 0n, 3n, [1n, [0n, [0n, s.min, [0n, [s.sub, 1024n], [0n, s.b3ChunkstLen, [0n, s.b3HasherGetChunkst, 2n]]]], [0n, s.len, 3n]], [0n, [0n, 1n, [0n, [0n, s.b3HasherPutChunkst, 2n], [0n, [0n, s.b3ChunkstUpdate, [0n, s.b3HasherGetChunkst, 2n]], [0n, [0n, s.take, 4n], 3n]]]], [0n, [0n, s.drop, 4n], 3n]]]], 0n], [0n, [0n, [0n, s.ifNot, [0n, s.len, 2n]], 1n], [0n, [0n, [0n, s.__if, [0n, [s.neq, 1024n], [0n, s.b3ChunkstLen, [0n, s.b3HasherGetChunkst, 1n]]]], [0n, [0n, 3n, 1n], 2n]], [1n, [0n, [2n, 3n], [0n, s.b3ChunkstGetChunkCounter, [0n, s.b3HasherGetChunkst, 1n]]], [1n, [0n, [0n, [0n, s.b3HasherAddChunkChainingValue, 1n], [0n, s.b3OutputChainingValue, [0n, s.b3ChunkstOutput, [0n, s.b3HasherGetChunkst, 1n]]]], 4n], [0n, [0n, 3n, [0n, [0n, s.b3HasherPutChunkst, 5n], [0n, [0n, [0n, s.b3ChunkstNew, [0n, s.b3HasherGetKeyWords, 5n]], 4n], [0n, s.b3HasherGetFlags, 5n]]]], 2n]]]]]]]);
s.b3Finalize = runpin("b3Finalize", [0n, 479217114100625039569762n, 2n, [0n, [0n, [0n, [0n, [0n, 28519n, 4n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 4n]], [0n, [0n, s.b3OutputRootOutputBytes, 3n], 2n]], [0n, [0n, [0n, [0n, 0n, 1n], 2n], [0n, [0n, [0n, [0n, s.b3ParentOutput, [0n, [s.idx, 0n], 4n]], [0n, s.b3OutputChainingValue, 3n]], [0n, s.b3HasherGetKeyWords, 1n]], [0n, s.b3HasherGetFlags, 1n]]], [0n, [s.idx, 1n], 4n]]]], 1n], 2n], [0n, s.b3ChunkstOutput, [0n, s.b3HasherGetChunkst, 1n]]], [0n, s.b3HasherGetCvStack, 1n]]]);
s.blake3 = runpin("blake3", [0n, 56510686260322n, 1n, [0n, [0n, s.b3Finalize, [0n, [s.b3HasherUpdate, [[0n, 0n, 5n, 0n], 0n, 0n, [[0n, 0n, 9n, 0n], 1541459225n, 528734635n, 2600822924n, 1359893119n, 2773480762n, 1013904242n, 3144134277n, 1779033703n], [[0n, 0n, 7n, 0n], 0n, 0n, 0n, [[0n, 0n, 65n, 0n], 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n, 0n], 0n, [[0n, 0n, 9n, 0n], 1541459225n, 528734635n, 2600822924n, 1359893119n, 2773480762n, 1013904242n, 3144134277n, 1779033703n]]]], 1n]], 32n]]);
s.optionRowSequence = runpin("optionRowSequence", [0n, 34500685841080089597022286209865204658287n, 1n, [0n, [[0n, 1886351212n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [0n, s.SOME, [0n, s.listToRowReversed, 1n]]], [0n, [0n, [0n, s.__if, [0n, s.isNat, [0n, [s.idx, 0n], 2n]]], [2n, 0n]], [0n, [0n, 0n, [0n, [0n, s.CONS, [0n, s.cdr, [0n, [s.idx, 0n], 2n]]], 1n]], [0n, [s.idx, 1n], 2n]]]]], 0n], [0n, s.listFromRow, 1n]]]);
s.optionRowTraverse = runpin("optionRowTraverse", [0n, 34521974258274374513414405534357870899311n, 2n, [0n, s.optionRowSequence, [0n, [0n, s.map, 1n], 2n]]]);
s.readDigit = runpin("readDigit", [0n, 2147417467589354415474n, 1n, [0n, [0n, [0n, s.tabSwitch, 1n], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, 0n, 11n, [[0n, 0n, 11n, 0n], 57n, 56n, 55n, 54n, 53n, 52n, 51n, 50n, 49n, 48n]], [0n, s.SOME, 9n]], [0n, s.SOME, 8n]], [0n, s.SOME, 7n]], [0n, s.SOME, 6n]], [0n, s.SOME, 5n]], [0n, s.SOME, 4n]], [0n, s.SOME, 3n]], [0n, s.SOME, 2n]], [0n, s.SOME, [2n, 1n]]], [0n, s.SOME, [2n, 0n]]]]]);
s.readNat = runpin("readNat", [0n, 32758086617884018n, 1n, [0n, [0n, [0n, s.__if, [0n, s.isNat, [0n, [s.optionRowTraverse, s.readDigit], [0n, s.cordToRow, 1n]]]], [2n, 0n]], [1n, [0n, s.cdr, [0n, [s.optionRowTraverse, s.readDigit], [0n, s.cordToRow, 1n]]], [0n, [0n, [0n, s.ifNot, [0n, s.len, 2n]], [2n, 0n]], [0n, [2n, 0n], [0n, [s.idx, 1n], [0n, [s.foldr, [0n, 0n, 2n, [1n, [0n, [s.idx, 0n], 2n], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, s.add, [0n, [s.idx, 1n], 2n]], [0n, [0n, s.mul, 3n], 1n]]], [0n, [s.mul, 10n], 3n]]]], [[0n, 0n, 3n, 0n], 0n, 1n]], 2n]]]]]]]);
s.readNatEither = runpin("readNatEither", [0n, 9063394790639755131732965287282n, 3n, [1n, [0n, s.readNat, 3n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 4n]], [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]]], [0n, [2n, 1n], [0n, s.cdr, 4n]]]]]);
s.readAtomLit = runpin("readAtomLit", [0n, 140732653394197195694105970n, 1n, [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 4800129995590518675663033179576356025467478883351428659475089028929468555882318n], 1n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [1n, [0n, [s.idx, 1n], 1n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], [0n, s.RIGHT, 3n]], 2n]]], [0n, s.RIGHT, [0n, [s.idx, 1n], 1n]]], [0n, s.RIGHT, [0n, [s.idx, 1n], 1n]]], [1n, [0n, s.readNat, [0n, [s.idx, 1n], 1n]], [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]]], [0n, [2n, 1n], [0n, s.cdr, 3n]]]]], [1n, [0n, [s.idx, 2n], 1n], [0n, [0n, [0n, s.__if, [0n, s.rowOr, [0n, [0n, [0n, [0n, 0n, 4n, 0n], [0n, [s.neq, 1n], [0n, s.len, 3n]]], [0n, [s.neq, 0n], [0n, [s.idx, 3n], 1n]]], [0n, [s.neq, 37n], [0n, [s.idx, 1n], 1n]]]]], 2n], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], [0n, [s.idx, 0n], 3n]]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], [0n, s.RIGHT, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 3n]]]], 2n]]]]]]]]);
s.unrollSlip2Tis = runpin("unrollSlip2Tis", [0n, 2340822119201905587829419541687925n, 2n, [0n, [0n, [0n, [0n, 1886351212n, 3n, [1n, [0n, 0n, 1n], [1n, [1n, [0n, 1n, 3n], [0n, [0n, [0n, s.__if, [0n, s.car, 6n]], [0n, [0n, 4n, [0n, [0n, s.CONS, [0n, s.cdr, 6n]], 2n]], [2n, 0n]]], 6n]], [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 3n]], [0n, s.RIGHT, [0n, s.listToRowReversed, 2n]]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 3n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 5n], 5n], 5n], 5n], [1n, [0n, [s.idx, 2n], 3n], [1n, [0n, [s.idx, 3n], 3n], [0n, [0n, [0n, s.__if, [0n, [s.neq, 61n], [0n, [s.idx, 1n], 3n]]], 5n], [1n, [0n, s.len, 6n], [0n, [0n, [0n, s.__if, [0n, [0n, s.and, [0n, [s.eql, 1n], 8n]], [0n, [s.neq, 0n], 7n]]], [0n, [0n, 4n, [0n, [0n, s.CONS, [0n, [0n, [0n, 0n, 3n, 0n], 7n], [0n, [s.idx, 0n], 6n]]], 2n]], [2n, 0n]]], [0n, [0n, [0n, s.__if, [0n, [s.neq, 2n], 8n]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 3112441204004093871212116705756712397826353041342097003465778356166717n], 3n]]], [0n, [0n, 4n, [0n, [0n, s.CONS, 6n], 2n]], 7n]]]]]]]]]]]]], 1n], [2n, 0n]], 2n]]);
s.readSignature = runpin("readSignature", [0n, 8037467698973027977498336519538n, 1n, [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 76849573318251731375350958588649116218711505285567553166372485857942759683162008199469430889857303017122566782963819195832704432531186471532795688262n], 1n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], [1n, [0n, s.readSymbol, 1n], [0n, [0n, [0n, s.__if, [0n, s.car, 3n]], [0n, [0n, 0n, 2n, 0n], [0n, [s.idx, 0n], [0n, s.cdr, 3n]]]], 3n]]], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, [s.idx, 1n], 1n]], 124n]], 2n], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, [0n, [s.idx, 3n], 1n]], [2n, 0n]]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 921438131318656232772626740851484249959021652428353728898219814388295050924623978478125276029294n], 1n]]], [0n, [s.eitherRowTraverse, s.readSymbol], [0n, [s.idx, 2n], 1n]]]]]]]]);
s.readCorePattern = runpin("readCorePattern", [0n, 573472887219017357214498219903509874n, 2n, [1n, [0n, s.readSignature, 1n], [0n, [0n, [0n, s.__if, [0n, s.car, 3n]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], 2n], [0n, s.cdr, 3n]]]], 3n]]]);
s.readCoreBody = runpin("readCoreBody", [0n, 37569104177818951109031585138n, 1n, [1n, [0n, [s.unrollSlip2Tis, [0n, 0n, 1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 2219844716535307078724513783115598n], 1n]]]], 1n], [0n, [0n, [0n, s.__if, [0n, s.car, 2n]], [0n, [s.eitherRowTraverse, [s.rowApply, s.readCorePattern]], [0n, s.cdr, 2n]]], 2n]]]);
s.anonLamE = runpin("anonLamE", [0n, 5002761741976694369n, 2n, [0n, [0n, [s.HEIR, 38n], [0n, [0n, 0n, 2n, 0n], [0n, s.appE, 1n]]], 2n]]);
s.taggedLamE = runpin("taggedLamE", [0n, 327860993511146459193716n, 4n, [0n, [0n, [s.HEIR, 63n], [0n, [0n, 0n, 2n, 0n], [0n, s.appE, [0n, [0n, s.weld, [0n, [0n, 0n, 2n, 0n], [0n, [s.NODE, 36n], [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.natE, 2n]], 1n]]]], 3n]]]], 4n]]);
s.matchE = runpin("matchE", [0n, 76314647486829n, 3n, [0n, s.appE, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], [0n, s.vecE, 3n]], 2n], 1n], [0n, s.cnsE, s.match]]]]);
//s.WEIRD = runpin("WEIRD", [0n, 27977564948884771n, 4n, [0n, [0n, [0n, [0n, [s.gensymMacro, 27977564948884771n, [[0n, 0n, 4n, 0n], s.readCoreBody, s.RIGHT, s.readAtomLit], [0n, 0n, 4n, [1n, [0n, s.gensymE, 1n], [1n, [0n, s.gensymE, [0n, [2n, 3n], 1n]], [1n, [0n, [0n, 8317429712006572386n, 3n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], 2n], [1n, [0n, [s.idx, 0n], [0n, [s.idx, 1n], [0n, [s.idx, 0n], 3n]]], [1n, [0n, [s.map, s.WORD], [0n, [s.drop, 1n], 4n]], [0n, [0n, [0n, s.letE, [0n, s.WORD, [0n, [s.idx, 0n], 4n]]], [0n, [0n, s.anonLamE, 5n], [0n, s.appE, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.vecE, [0n, [0n, s.weld, [0n, [0n, 0n, 2n, 0n], [0n, s.natE, [0n, [s.idx, 0n], [0n, [s.idx, 0n], 3n]]]]], 5n]]], 1n]]]], [0n, [0n, [0n, 0n, 1n], 2n], [0n, [s.idx, 1n], 3n]]]]]]], 5n], [1n, [0n, [0n, s.listZip, [0n, s.listEnumFrom, [2n, 0n]]], [0n, s.listFromRow, 4n]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, [0n, s.letE, 5n], [0n, [0n, [0n, [0n, s.taggedLamE, 5n], 2n], [0n, [0n, 0n, 2n, 0n], 6n]], [0n, [0n, 7n, [0n, [0n, [0n, s.matchE, 6n], [0n, s.natE, [2n, 0n]]], [0n, [0n, s.turn, [0n, s.listToRow, 8n]], [0n, [0n, 0n, 2n, [0n, [s.NODE, 42n], [0n, [0n, [0n, [0n, 0n, 4n, 0n], [0n, [s.idx, 1n], [0n, [s.idx, 1n], 2n]]], 1n], [0n, [s.NODE, 44n], [0n, [s.map, s.WORD], [0n, [s.weld, [[0n, 0n, 2n, 0n], 95n]], [0n, [s.drop, 1n], [0n, [s.idx, 0n], [0n, [s.idx, 1n], 2n]]]]]]]]], 6n]]]], 8n]]], [0n, [0n, 7n, 3n], 8n]]], [2n, 2n]]]]]]]]], 1n], 2n], 3n], 4n]]);
s.looper = runpin("looper", [0n, 125780003614572n, 1n, [0n, [0n, 1886351212n, 1n, [0n, [0n, [0n, s.match, 1n], [2n, 0n]], [0n, [0n, 0n, 2n, 0n], [0n, [0n, [0n, s.ifNot, [0n, [s.idx, 1n], 1n]], [2n, 0n]], [0n, 0n, [[0n, 0n, 3n, 0n], 0n, 0n]]]]]], [0n, [0n, [0n, 0n, 3n, 0n], 1n], [2n, 0n]]]]);
s.loopFun = run("loopFun", [0n, 125780003614572n, 1n, [0n, [0n, 1886351212n, 1n, [0n, [0n, [0n, s.match, 1n], [2n, 0n]], [0n, [0n, 0n, 2n, 0n], [0n, [0n, [0n, s.ifNot, [0n, [s.idx, 1n], 1n]], [2n, 0n]], [0n, 0n, [[0n, 0n, 3n, 0n], 0n, 0n]]]]]], [0n, [0n, [0n, 0n, 3n, 0n], 1n], [2n, 0n]]]]);
s.evenOdd = run("evenOdd", [[0n, 0n, 3n, 0n], s.odd, s.even]);
s.even = run("even", s.even);
s.odd = run("odd", s.odd);
//s.WEIRD = runpin("WEIRD", [0n, 33335429275412259n, 4n, [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.EBED, 1n]], [2n, 0n]]]]);
s.gulf = runpin("gulf", [0n, 1718383975n, 2n, [0n, [0n, s.gen, [0n, [0n, s.sub, [0n, 3n, 2n]], 1n]], [0n, s.add, 1n]]]);
s.mkInput = runpin("mkInput", [0n, 32780223045528429n, 1n, [0n, [s.map, [0n, 0n, 1n, [0n, [0n, s.mod, 1n], 256n]]], [0n, [s.gulf, 0n], [0n, s.dec, 1n]]]]);
s.hexAlphabet = run("hexAlphabet", [0n, 1n, 1n, 476390080588707421148136377477223297328n]);
s.hexChar = runpin("hexChar", [0n, 32195247781471592n, 1n, [0n, [s.barGet, [0n, 1n, 1n, 476390080588707421148136377477223297328n]], 1n]]);
s.hexByte = runpin("hexByte", [0n, 28557036802827624n, 1n, [0n, s.cordFromRow, [0n, [s.map, s.hexChar], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [s.takeBits, 4n], 1n]], [0n, [s.takeBits, 4n], [0n, [0n, s.rsh, 1n], 4n]]]]]]);
s.showByte = runpin("showByte", [0n, 7310601421507750003n, 1n, [0n, [s.cordWeld, 30768n], [0n, s.hexByte, 1n]]]);
s.showHash = runpin("showHash", [0n, 7526466366135560307n, 1n, [0n, [s.cordWeld, 30768n], [0n, s.cordCat, [0n, [s.map, s.hexByte], 1n]]]]);
s.hexCharToNat = runpin("hexCharToNat", [0n, 36017897342037936163075417448n, 1n, [0n, [0n, [0n, s.__if, [0n, [0n, s.lte, 1n], 57n]], [0n, [0n, s.sub, 1n], 48n]], [0n, [s.add, 10n], [0n, [0n, s.sub, [0n, [0n, s.min, 1n], 102n]], 97n]]]]);
s.barFromHex = runpin("barFromHex", [0n, 568552318045881881485666n, 1n, [1n, [0n, [s.map, s.hexCharToNat], [0n, s.cordToRow, 1n]], [0n, [0n, [[0n, 1886351212n, 3n, [0n, [0n, s.seq, 1n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [0n, [2n, [0n, 1n, 1n]], 1n]], [0n, [0n, [0n, s.__if, [0n, s.isNat, [0n, [s.idx, 1n], 2n]]], [0n, s.die, 478958354455822697786729n]], [0n, [0n, [0n, 0n, [0n, [0n, s.add, 1n], [0n, [0n, s.add, [0n, [0n, s.mul, 3n], [0n, [s.idx, 0n], [0n, [s.idx, 1n], 2n]]]], [0n, [0n, s.mul, 3n], [0n, [s.mul, 16n], [0n, [s.idx, 0n], 2n]]]]]], [0n, [s.idx, 1n], [0n, [s.idx, 1n], 2n]]], [0n, [s.mul, 256n], 3n]]]]]], 0n], [0n, s.listFromRow, [0n, s.cat, [0n, [0n, [[0n, 0n, 4n, 0n], [[0n, 0n, 3n, 0n], 1n, 0n]], 2n], [0n, [0n, [0n, s.__if, [0n, s.even, [0n, s.len, 2n]]], [0n, 0n, 1n, 0n]], [[0n, 0n, 2n, 0n], 0n]]]]]], [2n, 1n]]]]);
s.refs = runpin("refs", [0n, 1936090482n, 1n, [0n, s.listToRowReversed, [0n, [[0n, 28519n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isPin, 2n]], [0n, [0n, [0n, s.__if, [0n, [0n, s.listHas, 2n], 1n]], 1n], [0n, [0n, s.CONS, 2n], 1n]]], [0n, [0n, [0n, s.__if, [0n, s.isApp, 2n]], [0n, [0n, 0n, [0n, [0n, 0n, 1n], [0n, s.car, 2n]]], [0n, s.cdr, 2n]]], [0n, [0n, [0n, s.__if, [0n, s.isFun, 2n]], [0n, [0n, 0n, 1n], [0n, s.cdr, 2n]]], 1n]]]], 0n], [0n, [0n, [0n, s.__if, [0n, s.isPin, 1n]], [0n, s.pinItem, 1n]], 1n]]]]);
s.listLookup = runpin("listLookup", [0n, 531071056666682916563308n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [2n, 0n]], [0n, [0n, [0n, s.__if, [0n, [0n, s.eql, [0n, [s.idx, 0n], [0n, [s.idx, 0n], 2n]]], 1n]], [0n, s.SOME, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 2n]]]], [0n, [0n, 0n, 1n], [0n, [s.idx, 1n], 2n]]]]]);
s.dropHighBit = runpin("dropHighBit", [0n, 140732468564204624234377828n, 1n, [0n, [0n, s.sub, 1n], [0n, s.bex, [0n, s.dec, [0n, s.met, 1n]]]]]);
s.mat = runpin("mat", [0n, 7627117n, 1n, [0n, [0n, [0n, s.ifNot, 1n], [[0n, 0n, 3n, 0n], 1n, 1n]], [1n, [0n, s.met, 1n], [1n, [0n, s.met, 2n], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, s.add, [0n, s.bex, 3n]], [0n, [0n, s.lsh, [0n, s.dropHighBit, [0n, [0n, s.mix, [0n, [0n, s.takeBits, [0n, s.dec, 3n]], 2n]], [0n, [0n, s.lsh, 1n], [0n, s.dec, 3n]]]]], [0n, [2n, 3n], 3n]]]], [0n, [0n, s.add, 2n], [0n, s.dec, [0n, [0n, s.add, 3n], 3n]]]]]]]]);
s.optionRowSequence = runpin("optionRowSequence", [0n, 34500685841080089597022286209865204658287n, 1n, [0n, [[0n, 1886351212n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [0n, s.SOME, [0n, s.listToRowReversed, 1n]]], [0n, [0n, [0n, s.__if, [0n, s.isNat, [0n, [s.idx, 0n], 2n]]], [2n, 0n]], [0n, [0n, 0n, [0n, [0n, s.CONS, [0n, s.cdr, [0n, [s.idx, 0n], 2n]]], 1n]], [0n, [s.idx, 1n], 2n]]]]], 0n], [0n, s.listFromRow, 1n]]]);
s.optionRowTraverse = runpin("optionRowTraverse", [0n, 34521974258274374513414405534357870899311n, 2n, [0n, s.optionRowSequence, [0n, [0n, s.map, 1n], 2n]]]);
s.readDigit = runpin("readDigit", [0n, 2147417467589354415474n, 1n, [0n, [0n, [0n, s.tabSwitch, 1n], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, [0n, 0n, 11n, [[0n, 0n, 11n, 0n], 57n, 56n, 55n, 54n, 53n, 52n, 51n, 50n, 49n, 48n]], [0n, s.SOME, 9n]], [0n, s.SOME, 8n]], [0n, s.SOME, 7n]], [0n, s.SOME, 6n]], [0n, s.SOME, 5n]], [0n, s.SOME, 4n]], [0n, s.SOME, 3n]], [0n, s.SOME, 2n]], [0n, s.SOME, [2n, 1n]]], [0n, s.SOME, [2n, 0n]]]]]);
s.readNat = runpin("readNat", [0n, 32758086617884018n, 1n, [0n, [0n, [0n, s.__if, [0n, s.isNat, [0n, [s.optionRowTraverse, s.readDigit], [0n, s.cordToRow, 1n]]]], [2n, 0n]], [1n, [0n, s.cdr, [0n, [s.optionRowTraverse, s.readDigit], [0n, s.cordToRow, 1n]]], [0n, [0n, [0n, s.ifNot, [0n, s.len, 2n]], [2n, 0n]], [0n, s.SOME, [0n, [s.idx, 1n], [0n, [s.foldr, [0n, 0n, 2n, [1n, [0n, [s.idx, 0n], 2n], [0n, [0n, [0n, 0n, 3n, 0n], [0n, [0n, s.add, [0n, [s.idx, 1n], 2n]], [0n, [0n, s.mul, 3n], 1n]]], [0n, [s.mul, 10n], 3n]]]], [[0n, 0n, 3n, 0n], 0n, 1n]], 2n]]]]]]]);
s.readNatEither = runpin("readNatEither", [0n, 9063394790639755131732965287282n, 3n, [1n, [0n, s.readNat, 3n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 4n]], [0n, [0n, [0n, 0n, 3n, [0n, [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]], 3n]], 1n], 2n]], [0n, s.RIGHT, [0n, s.cdr, 4n]]]]]);
s.readNatWord = runpin("readNatWord", [0n, 121432985630871006702822770n, 1n, [1n, 4792909132605291496102334812996263501355059322815504493731162765717081534263118n, [1n, [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 3n], 3n], 3n], [1n, [0n, s.readNat, [0n, [s.idx, 1n], 1n]], [0n, [0n, [0n, s.__if, [0n, s.isNat, 4n]], [0n, [0n, [0n, 0n, 3n, [0n, [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]], 3n]], 1n], 2n]], [0n, s.RIGHT, [0n, s.cdr, 4n]]]]], 3n]]]]]);
s.readAtomLit = runpin("readAtomLit", [0n, 140732653394197195694105970n, 1n, [1n, [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 4800129995590518675663033179576356025467478883351428659475089028929468555882318n], 1n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [1n, [0n, [s.idx, 1n], 1n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], [0n, s.RIGHT, 3n]], 2n]]], [0n, s.RIGHT, [0n, [s.idx, 1n], 1n]]], [0n, s.RIGHT, [0n, [s.idx, 1n], 1n]]], [1n, [0n, s.readNat, [0n, [s.idx, 1n], 1n]], [0n, [0n, [0n, s.__if, [0n, s.isNat, 3n]], [0n, [0n, [0n, 0n, 3n, [0n, [0n, s.LEFT, [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]], 3n]], 1n], 2n]], [0n, s.RIGHT, [0n, s.cdr, 3n]]]]], [1n, [0n, [s.idx, 2n], 1n], [0n, [0n, [0n, s.__if, [0n, s.rowOr, [0n, [0n, [0n, [0n, 0n, 4n, 0n], [0n, [s.neq, 1n], [0n, s.len, 3n]]], [0n, [s.neq, 0n], [0n, [s.idx, 3n], 1n]]], [0n, [s.neq, 37n], [0n, [s.idx, 1n], 1n]]]]], 2n], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], [0n, [s.idx, 0n], 3n]]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 2n], 2n], 2n], [0n, s.RIGHT, [0n, [s.idx, 1n], [0n, [s.idx, 0n], 3n]]]], 2n]]]]]]]]);
s.readSwitchPattern = runpin("readSwitchPattern", [0n, 37583119136785521536300124631949593634162n, 1n, [0n, [0n, [0n, s.__if, [0n, [0n, s.and, [0n, [s.eql, 1n], [0n, [s.idx, 0n], 1n]]], [0n, [s.eql, 95n], [0n, [s.idx, 1n], 1n]]]], [0n, s.RIGHT, [2n, 0n]]], [1n, [0n, s.readAtomLit, 1n], [0n, [0n, [0n, s.__if, [0n, s.car, 2n]], [0n, s.RIGHT, [0n, s.SOME, [0n, s.cdr, 2n]]]], 2n]]]]);
s.derpSwitchPattern = runpin("derpSwitchPattern", [0n, 37583119136785521536300124631949796074852n, 2n, [1n, [0n, s.readSwitchPattern, 1n], [0n, [0n, [0n, s.__if, [0n, s.car, 3n]], [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], 2n], [0n, s.cdr, 3n]]]], 3n]]]);
s.unrollSlip2 = runpin("unrollSlip2", [0n, 60977140740642390647402101n, 3n, [0n, [0n, [0n, [0n, [0n, 1886351212n, 4n, [1n, [0n, [0n, 0n, 1n], 2n], [1n, [1n, [0n, 2n, 4n], [0n, [0n, [0n, s.__if, [0n, s.car, 7n]], [0n, [0n, 5n, [0n, [0n, s.CONS, [0n, s.cdr, 7n]], 3n]], [2n, 0n]]], [0n, s.cdr, 7n]]], [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 4n]], [0n, s.listToRowReversed, 3n]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 4n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 6n], 6n], 6n], 6n], [0n, [0n, [0n, s.__if, [0n, [0n, s.neq, 1n], [0n, [s.idx, 1n], 4n]]], 6n], [0n, [0n, 5n, [0n, [0n, s.CONS, [0n, [s.idx, 2n], 4n]], 3n]], [0n, [s.idx, 3n], 4n]]]]]]]]], 1n], 2n], [2n, 0n]], 3n]]);
s.unrollSlip2Tis = runpin("unrollSlip2Tis", [0n, 2340822119201905587829419541687925n, 2n, [0n, [0n, [0n, [0n, 1886351212n, 3n, [1n, [0n, 0n, 1n], [1n, [1n, [0n, 1n, 3n], [0n, [0n, [0n, s.__if, [0n, s.car, 6n]], [0n, [0n, 4n, [0n, [0n, s.CONS, [0n, s.cdr, 6n]], 2n]], [2n, 0n]]], 6n]], [0n, [0n, [0n, s.__if, [0n, [s.eql, 0n], 3n]], [0n, s.RIGHT, [0n, s.listToRowReversed, 2n]]], [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 3n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 5n], 5n], 5n], 5n], [1n, [0n, [s.idx, 2n], 3n], [1n, [0n, [s.idx, 3n], 3n], [0n, [0n, [0n, s.__if, [0n, [s.neq, 61n], [0n, [s.idx, 1n], 3n]]], 5n], [1n, [0n, s.len, 6n], [0n, [0n, [0n, s.__if, [0n, [0n, s.and, [0n, [s.eql, 1n], 8n]], [0n, [s.neq, 0n], 7n]]], [0n, [0n, 4n, [0n, [0n, s.CONS, [0n, [0n, [0n, 0n, 3n, 0n], 7n], [0n, [s.idx, 0n], 6n]]], 2n]], [2n, 0n]]], [0n, [0n, [0n, s.__if, [0n, [s.neq, 2n], 8n]], [0n, s.LEFT, [0n, [[0n, 0n, 3n, 0n], 3112441204004093871212116705756712397826353041342097003465778356166717n], 3n]]], [0n, [0n, 4n, [0n, [0n, s.CONS, 6n], 2n]], 7n]]]]]]]]]]]]], 1n], [2n, 0n]], 2n]]);
s.readSwitchPatterns = runpin("readSwitchPatterns", [0n, 10055496001289213885898048567423205738898802n, 1n, [1n, [0n, [s.unrollSlip2Tis, [0n, 0n, 1n, [0n, s.RIGHT, [0n, [0n, [0n, 0n, 3n, 0n], 1n], [0n, s.WORD, 95n]]]]], 1n], [0n, [0n, [0n, s.__if, [0n, s.car, 2n]], [1n, [0n, [s.eitherRowTraverse, [s.rowApply, s.derpSwitchPattern]], [0n, s.cdr, 2n]], [0n, [0n, [0n, s.__if, [0n, s.car, 3n]], [0n, s.RIGHT, [0n, [0n, [s.foldl, [0n, 0n, 2n, [1n, [0n, [s.idx, 1n], 2n], [0n, [0n, [0n, s.__if, [0n, s.isNat, [0n, [s.idx, 0n], 2n]]], [0n, [0n, [0n, s.put, 1n], [2n, 0n]], 3n]], [0n, [0n, [0n, s.put, 1n], [2n, 1n]], [0n, [0n, [0n, s.tabPut, [0n, [s.idx, 1n], 1n]], [0n, s.cdr, [0n, [s.idx, 0n], 2n]]], 3n]]]]]], [0n, [[0n, 0n, 3n, 0n], [0n, 0n, 1n, [0n, 0n, 1n, 0n]]], [0n, s.cnsE, [2n, 0n]]]], [0n, s.cdr, 3n]]]], 3n]]], 2n]]]);
//s.WEIRD = runpin("WEIRD", [0n, 29382749214700323n, 4n, [0n, [0n, [0n, [0n, [s.simpleMacro, 29382749214700323n, [[0n, 0n, 3n, 0n], s.readSwitchPatterns, s.RIGHT], [0n, 0n, 2n, [1n, [0n, [s.idx, 0n], 2n], [1n, [0n, [s.idx, 1n], 2n], [0n, s.RIGHT, [0n, [0n, [0n, s.__if, [0n, s.listAnd, [0n, [0n, [s.listZipWith, s.eql], [0n, s.listEnumFrom, [2n, 0n]]], [0n, s.listFromRow, [0n, s.tabKeys, 4n]]]]], [0n, s.appE, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], [0n, s.vecE, [0n, s.tabVals, 4n]]], 3n], 1n], [0n, s.cnsE, s.__switch]]]], [0n, s.appE, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], [0n, s.tabE, 4n]], 3n], 1n], [0n, s.cnsE, s.tabSwitch]]]]]]]]], 1n], 2n], 3n], 4n]]);
s.switchTest = runpin("switchTest", [0n, 549923189157027681761139n, 1n, [0n, [0n, [0n, s.tabSwitch, 1n], [0n, 1n, 1n, 24278376n]], [[0n, 0n, 5n, [[0n, 0n, 5n, 0n], 7368569n, 26984n, 346n, 345n]], [0n, 1n, 1n, 24145785n], [0n, 1n, 1n, 92520n], [0n, 1n, 1n, 20329523n], [0n, 1n, 1n, 20263987n]]]]);
s.switchTest2 = runpin("switchTest2", [0n, 60996214169888486417069939n, 1n, [0n, [0n, [0n, s.__switch, 1n], 491327616079n], [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], [0n, s.barNat, [0n, 1n, 1n, 1535005321300n]]], 7305044n], 6647375n], 1869768026n]]]);
s.switchTest3 = runpin("switchTest3", [0n, 62205139989503115591776115n, 1n, [0n, [0n, [0n, s.__switch, 1n], 7738135660106375494n], [[0n, 0n, 4n, 0n], 7305044n, 6647375n, 1869768026n]]]);
s.valRex = runpin("valRex", [0n, 132376569864566n, 1n, [0n, s.CORD, 1406660535539980193093n]]);
s.showRex = runpin("showRex", [0n, 33888402070792307n, 1n, [0n, [0n, [0n, s.__switch, [0n, [s.idx, 0n], 1n]], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, 0n, [0n, s.valRex, [0n, [s.idx, 1n], 1n]]]], [0n, 0n, [0n, s.CORD, [0n, s.cordCat, [0n, [s.idx, 1n], 1n]]]]], [0n, s.barCat, [0n, [0n, [[0n, 0n, 4n, 0n], [0n, 1n, 1n, 290n]], [0n, s.natBar, [0n, [s.idx, 1n], 1n]]], [0n, 1n, 1n, 290n]]]], [0n, s.natBar, [0n, [s.idx, 1n], 1n]]], [1n, [0n, [s.idx, 1n], 1n], [1n, [0n, [s.idx, 2n], 1n], [1n, [0n, [s.idx, 3n], 1n], [1n, [0n, s.barCat, [0n, [0n, [[0n, 0n, 4n, 0n], [0n, 1n, 1n, 297n]], [0n, [s.barIntercalate, [0n, 1n, 1n, 288n]], [0n, [0n, [0n, s.__if, [0n, [0n, s.eql, 2n], 124n]], [0n, [0n, s.map, 0n], 3n]], [0n, [0n, s.weld, [0n, [0n, 0n, 2n, 0n], [0n, s.natBar, 2n]]], [0n, [0n, s.map, 0n], 3n]]]]], [0n, 1n, 1n, 296n]]], [0n, [0n, [0n, s.__if, [0n, [0n, s.eql, 4n], [2n, 0n]]], 5n], [0n, [0n, s.barWeld, 5n], [0n, 0n, 4n]]]]]]]]]]);
s.natWords = runpin("natWords", [0n, 8314896634566959470n, 1n, [0n, [0n, [0n, s.__switch, 1n], [0n, [0n, [0n, 1886351212n, 2n, [0n, [0n, [0n, s.__switch, 2n], [0n, s.cordCat, [0n, [0n, [0n, 0n, 3n, 0n], [0n, 1n, [0n, [0n, s.mod, 2n], 10n]]], [0n, [0n, 0n, 1n], [0n, [0n, s.div, 2n], 10n]]]]], [[0n, 0n, 11n, 0n], 1701734734n, 499967813957n, 474148660563n, 7891283n, 1702259014n, 1920298822n, 435493693524n, 7305044n, 6647375n, 0n]]], 0n], 1n]], [[0n, 0n, 2n, 0n], 1869768026n]]]);
s.showRexExample = run("showRexExample", [0n, 0n, 1n, [0n, [2n, [0n, 1n, 1n, 2294762030640621330610650034746842948718687865263595698534190152829210504061192186176272812951960114731767602560599294127234178070827261361127793997444134140459686741644952076532820866521601441137683214982215182168748010933474111200382539576108610762839340578974304851519726932998210298890495797036395498358461698530691661742979585730325701133506736253743756374927311708948468341394309580316035158071736056099636821787217731176450086213947819768627953464384659337914045031167482455548141355712853843669285950374308232692283849074876931959407399151231904220977442736741728539995753282186903276637256362535781079281968901536925648819289226564021433773807880729246285302116354424158864286289504438471851232436459108530639608440735014903734749544669174315566101253289634286701624570335664104533793961179280261322587157236913801468926015360303058642679852731139091431025631219705910952231144341780048960690976764729931445587248965470910645478334166468903822018410986792n]], 1n]]);
//s.WEIRD = runpin("WEIRD", [0n, 15677n, 4n, [1n, [0n, [0n, s.mergeHeir, 3n], 4n], [0n, s.RIGHT, [0n, [0n, [0n, s.__switch, [0n, s.len, 5n]], [0n, [0n, [0n, 0n, 3n, 0n], [1n, [0n, s.gensymE, 2n], [0n, [0n, [0n, s.letE, 6n], [0n, [s.idx, 0n], 5n]], [0n, [0n, [0n, 1886351212n, 2n, [0n, [0n, [0n, s.__if, [0n, s.isNat, 2n]], [0n, s.die, 478958354455822697786729n]], [1n, [0n, [s.idx, 0n], 2n], [1n, [0n, [s.idx, 1n], 2n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 4n]], [0n, s.appE, [0n, [0n, [0n, [0n, 0n, 4n, 0n], 3n], 1n], [0n, s.cnsE, s.eql]]]], [0n, s.appE, [0n, [0n, [0n, [0n, 0n, 4n, 0n], [0n, [0n, 0n, 1n], 4n]], [0n, s.appE, [0n, [0n, [0n, [0n, 0n, 4n, 0n], 3n], 1n], [0n, s.cnsE, s.eql]]]], [0n, s.cnsE, s.and]]]]]]]], 6n], [0n, s.listFromRow, [0n, [s.drop, 1n], 5n]]]]]], [2n, 1n]]], [0n, [0n, [0n, [0n, 0n, 4n, 0n], [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.appE, [0n, [0n, [0n, [0n, 0n, 4n, 0n], [0n, [s.idx, 1n], 5n]], [0n, [s.idx, 0n], 5n]], [0n, s.cnsE, s.eql]]]], [2n, 0n]]], [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.appE, [0n, [0n, [0n, [0n, 0n, 4n, 0n], [0n, s.natE, [2n, 1n]]], [0n, [s.idx, 0n], 5n]], [0n, s.cnsE, s.seq]]]], [2n, 0n]]], [0n, [0n, [0n, 0n, 3n, 0n], [0n, s.natE, [2n, 1n]]], [2n, 0n]]]]]]]);
//s.WEIRD = runpin("WEIRD", [0n, 15663n, 4n, [0n, [0n, [0n, [0n, [s.simpleMacro, 15663n, [[0n, 0n, 3n, 0n], s.RIGHT, s.RIGHT], [0n, 0n, 2n, [0n, s.RIGHT, [0n, s.appE, [0n, [0n, [0n, 0n, 3n, 0n], [0n, [s.NODE, 15677n], [0n, [0n, [0n, 0n, 3n, 0n], 2n], 1n]]], [0n, s.cnsE, s.not]]]]]], 1n], 2n], 3n], 4n]]);
s.jam = runpin("jam", [0n, 7168362n, 2n, [1n, [0n, 1886351212n, 1n, [1n, [0n, [0n, 0n, 4n, [0n, 1n, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], 4n], 3n], 2n], [2n, 0n]]]], 0n], [1n, [0n, [0n, 0n, 5n, [0n, 1n, [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], 5n], 4n], 3n], 2n], [2n, 2n]]]], 0n], [1n, [0n, [0n, 0n, 4n, [0n, 1n, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], 4n], 3n], 2n], [2n, 3n]]]], 0n], [0n, [0n, [0n, s.match, 1n], [2n, 0n]], [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], [1n, [0n, [s.idx, 1n], 1n], [1n, [0n, [s.idx, 2n], 1n], [1n, [0n, [s.idx, 3n], 1n], [1n, [0n, [0n, s.listLookup, 7n], 6n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 8n]], [1n, [0n, [0n, s.CONS, [0n, [0n, [0n, 0n, 3n, 0n], 5n], 7n]], 6n], [0n, [0n, [0n, s.__if, [0n, s.isNat, 7n]], [0n, 0n, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], 7n], 9n], 5n], [2n, 0n]]]], [0n, [0n, [0n, s.__if, [0n, s.isApp, 7n]], [0n, 0n, [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, s.cdr, 7n]], [0n, s.car, 7n]], 9n], 5n], [2n, 2n]]]], [0n, 0n, [0n, [0n, [0n, [0n, [0n, [0n, 0n, 6n, 0n], [0n, s.cdr, 7n]], [0n, [0n, [2n, 0n], [0n, s.funName, 7n]], [0n, s.funArgs, 7n]]], 9n], 5n], [2n, 2n]]]]]]], [1n, [0n, s.cdr, 8n], [0n, [0n, [0n, s.__if, [0n, [0n, s.and, [0n, s.isNat, 7n]], [0n, [0n, s.lte, [0n, s.met, 7n]], [0n, s.met, 9n]]]], [0n, 0n, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], 7n], 6n], 5n], [2n, 0n]]]], [0n, 0n, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], 9n], 6n], 5n], [2n, 1n]]]]]]]]]]], [1n, [0n, 0n, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], [0n, [s.idx, 3n], 1n]], [0n, [s.idx, 2n], 1n]], [0n, [2n, 3n], [0n, [s.idx, 1n], 1n]]], [2n, 3n]]], [1n, [0n, [s.idx, 1n], 5n], [1n, [0n, 0n, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], [0n, [s.idx, 4n], 1n]], [0n, [s.idx, 3n], 5n]], [0n, [2n, 3n], [0n, [s.idx, 0n], 5n]]], [2n, 3n]]], [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], [0n, [s.idx, 3n], 7n]], [0n, [s.mul, 2n], [0n, [0n, s.add, [0n, [s.idx, 2n], 5n]], [0n, [0n, s.lsh, [0n, [s.idx, 2n], 7n]], 6n]]]], [0n, [s.add, 1n], [0n, [0n, s.add, 6n], [0n, [s.idx, 1n], 7n]]]], [0n, [s.idx, 0n], 7n]]]]]], [1n, [0n, s.mat, [0n, [s.idx, 3n], 1n]], [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], [0n, [s.idx, 2n], 1n]], [0n, [s.mix, 1n], [0n, [0n, s.lsh, [0n, [s.idx, 1n], 5n]], [2n, 2n]]]], [0n, [s.add, 2n], [0n, [s.idx, 0n], 5n]]], [0n, [s.idx, 1n], 1n]]]], [1n, [0n, s.mat, [0n, [s.idx, 3n], 1n]], [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], [0n, [s.idx, 2n], 1n]], [0n, [s.mix, 3n], [0n, [0n, s.lsh, [0n, [s.idx, 1n], 5n]], [2n, 2n]]]], [0n, [s.add, 2n], [0n, [s.idx, 0n], 5n]]], [0n, [s.idx, 1n], 1n]]]]]]]]], [1n, [0n, 3n, [0n, [0n, [0n, [0n, [0n, 0n, 5n, 0n], 2n], [0n, [0n, s.listZip, [0n, s.listFromRow, 1n]], [0n, s.listEnumFrom, [2n, 0n]]]], [0n, s.len, 1n]], [2n, 3n]]], [0n, [0n, s.add, [0n, [s.idx, 2n], 4n]], [0n, s.bex, [0n, [s.idx, 1n], 4n]]]]]]);
s.jar = runpin("jar", [0n, 7496042n, 1n, [1n, [0n, s.refs, 1n], [1n, [0n, s.cordToRow, [0n, [0n, s.jam, 2n], 1n]], [0n, [0n, [0n, [0n, 0n, 4n, 0n], 3n], 2n], [0n, s.blake3, [0n, s.cat, [0n, [0n, [0n, [0n, 0n, 4n, 0n], 3n], [0n, [s.rep, 0n], 32n]], [0n, s.cat, [0n, [0n, s.map, [0n, [0n, 0n, 2n, [0n, [s.idx, 0n], [0n, 1n, [0n, s.pinItem, 2n]]]], 0n]], 2n]]]]]]]]]);
s.niceJar = runpin("niceJar", [0n, 32195119501502830n, 1n, [1n, [0n, s.jar, 1n], [0n, [0n, [0n, [0n, 0n, 4n, [[0n, 0n, 4n, 0n], 1937008994n, 1936745828n, 1752392040n]], [0n, s.bytesBar, [0n, [s.idx, 2n], 2n]]], [0n, [s.idx, 1n], 2n]], [0n, s.bytesBar, [0n, [s.idx, 0n], 2n]]]]]);
s.jarHash = runpin("jarHash", [0n, 29400259242385770n, 1n, [0n, s.bytesBar, [0n, [s.idx, 0n], [0n, s.jar, 1n]]]]);
s.jarBytz = runpin("jarBytz", [0n, 34468011313357162n, 1n, [0n, s.bytesBar, [0n, [s.idx, 2n], [0n, s.jar, 1n]]]]);
s.pinHash = runpin("pinHash", [0n, 29400259242125680n, 1n, [0n, [0n, [0n, s.ifNot, [0n, s.isPin, 1n]], [2n, 0n]], [0n, s.jarHash, [0n, s.pinItem, 1n]]]]);
s.pinBytz = runpin("pinBytz", [0n, 34468011313097072n, 1n, [0n, [0n, [0n, s.ifNot, [0n, s.isPin, 1n]], [2n, 0n]], [0n, s.jarBytz, [0n, s.pinItem, 1n]]]]);

export let sire : any = s;
