
export enum FanKind {
  APP = 1,
  FUN,
  THUNK,
  PIN,
  ROW,
  COW
}

export type Nat = bigint;

// The type of a function implementation. This is actually something like
// (Fan[]) => Fan, but typescript gets really hung up on the apply() based
// calling convention of our autogenerated code.
export type Fun = any;

export type FanFun = { t: FanKind.FUN; n:Nat; a:Nat; b:Fan; x:Fun }

export type Fan =
  | Nat
  | { t: FanKind.APP; f:Fan; x:Fan }
  | { t: FanKind.FUN; n:Nat; a:Nat; b:Fan; x:Fun }
  | { t: FanKind.THUNK; x:((() => void) | null); r:(Fan | null) }
  | { t: FanKind.PIN; i:Fan; x:Fun }
  | { t: FanKind.ROW; r:Fan[] } // Next, hoist this up top.
  | { t: FanKind.COW; z:Nat }


// Local Variables:
// typescript-indent-level: 2
// End:
// vim: noai:ts=2:sw=2

